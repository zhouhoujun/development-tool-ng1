{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;AAAA,0BAA4B;AAC5B,qDAAmI;AACnI,uCAAsC;AACtC,uCAA4C;AAC5C,qCAAyC;AAMzC,IAAa,SAAS;IAAtB;IAsDA,CAAC;IArDG,8BAAU,GAAV,UAAW,MAAqB,EAAE,GAAe;QAC7C,4BAA4B;QAC5B,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC;YACtB,EAAE,EAAE,uBAAuB;YAC3B,EAAE,EAAE,uBAAuB;SAC9B,EAAE,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QAGzB,MAAM,CAAc;YAChB,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,GAAG;SACX,CAAC;IACN,CAAC;IAED,8BAAU,GAAV,UAAW,GAAiB;QACxB,IAAI,SAAS,GAAG,GAAG,CAAC,MAAwB,CAAC;QAE7C,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,KAAK,KAAK,IAAI,SAAS,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC;YAC5D,GAAG,CAAC,GAAG,CAAc;gBACjB,MAAM,EAAiB;oBACnB,IAAI,EAAE,MAAM;oBACZ,KAAK,EAAE,SAAS,CAAC,SAAS,IAAI,CAAC,UAAA,KAAK,IAAM,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,GAAG,KAAK,EAAE,MAAM,EAAE,yBAAM,CAAC,QAAQ,EAAE,CAAA,CAAC,CAAC,CAAC;oBACjG,MAAM,EAAE,UAAC,GAAG;wBACR,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,gBAAS,CAAC,CAAC;oBACpC,CAAC;iBACJ;aACJ,CAAC,CAAC;QACP,CAAC;QACD,GAAG,CAAC,GAAG,CAAc;YACjB,MAAM,EAAgB;gBAClB,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,UAAC,KAAK,EAAE,GAAG,IAAK,OAAA,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,CAAC,GAAG,KAAK,EAAE,MAAM,EAAE,yBAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAhE,CAAgE;gBACvF,MAAM,EAAE,UAAC,GAAG;oBACR,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAW,CAAC,CAAC;gBACtC,CAAC;aACJ;SACJ,CAAC,CAAA;IACN,CAAC;IAED,yBAAK,GAAL,UAAM,GAAiB;QACnB,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,aAAK,CAAC,CAAC;QAC5B,gBAAgB;QAChB,aAAa;QACb,mBAAmB;QACnB,gBAAgB;QAChB,KAAK;QACL,2CAA2C;QAC3C,0FAA0F;QAC1F,mBAAmB;QACnB,IAAI;QACJ,+BAA+B;QAC/B,8DAA8D;IAClE,CAAC;IACL,gBAAC;AAAD,CAtDA,AAsDC,IAAA;AAtDY,SAAS;IADrB,6BAAU,EAAE;GACA,SAAS,CAsDrB;AAtDY,8BAAS","file":"../index.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { ITask, RunWay, ITaskConfig, IAssertOption, IEnvOption, ITaskContext, IContextDefine, taskdefine } from 'development-core';\r\nimport { Clean } from './tasks/clean';\r\nimport { StartServer } from './tasks/serve';\r\nimport { KarmaTest } from './tasks/test';\r\nimport { IWebTaskOption } from './WebTaskOption';\r\nexport * from './WebTaskOption';\r\n\r\n\r\n@taskdefine()\r\nexport class WebDefine implements IContextDefine {\r\n    loadConfig(option: IAssertOption, env: IEnvOption): ITaskConfig {\r\n        // register default asserts.\r\n        option.asserts = _.extend({\r\n            ts: 'development-assert-ts',\r\n            js: 'development-assert-js'\r\n        }, option.asserts || {});\r\n\r\n\r\n        return <ITaskConfig>{\r\n            option: option,\r\n            env: env\r\n        };\r\n    }\r\n\r\n    setContext(ctx: ITaskContext) {\r\n        let webOption = ctx.option as IWebTaskOption;\r\n\r\n        if (webOption.forceTest !== false && webOption.test !== false) {\r\n            ctx.add(<ITaskConfig>{\r\n                option: <IAssertOption>{\r\n                    name: 'test',\r\n                    order: webOption.testOrder || (total => { return { value: 2 / total, runWay: RunWay.parallel } }),\r\n                    loader: (ctx) => {\r\n                        return ctx.findTasks(KarmaTest);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        ctx.add(<ITaskConfig>{\r\n            option:<IAssertOption>{\r\n                name: 'serve',\r\n                order: (total, ctx) => ctx.env.test ? { value: 2 / total, runWay: RunWay.parallel } : 1,\r\n                loader: (ctx) => {\r\n                    return ctx.findTasks(StartServer);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    tasks(ctx: ITaskContext): Promise<ITask[]> {\r\n        return ctx.findTasks(Clean);\r\n        // let tasks = [\r\n        //     Clean,\r\n        //     StartServer,\r\n        //     KarmaTest\r\n        // ];\r\n        // let option: IWebTaskOption = ctx.option;\r\n        // if (option.forceTest === false || ctx.env.test === false || ctx.env.test === 'false') {\r\n        //     tasks.pop();\r\n        // }\r\n        // return ctx.findTasks(tasks);\r\n        // return ctx.findTasksInDir(path.join(__dirname, './tasks'));\r\n    }\r\n}\r\n"]}