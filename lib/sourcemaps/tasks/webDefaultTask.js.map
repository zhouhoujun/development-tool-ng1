{"version":3,"sources":["tasks/webDefaultTask.js"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","chalk","require","development_core_1","karma_1","browserSync","del","Clean","info","_classCallCheck","this","_createClass","value","name","ctx","gulp","tkn","task","getSrc","order","oper","Operation","clean","default","exports","BuildTest","option","subTaskName","getInfo","karmaConfigFile","path","join","env","root","cfg","karmaConfig","Server","extend","basePath","getDist","singleRun","watch","configFile","code","console","log","red","cyan","callback","start","build","test","DeployTest","isAbsolute","release","StartService","browsersync","open","port","process","PORT","files","dist","err","bs","serve"],"mappings":"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","file":"../../tasks/webDefaultTask.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst chalk = require('chalk');\n// import * as path from 'path';\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst karma_1 = require('karma');\nconst path = require('path');\nconst browserSync = require('browser-sync');\nconst del = require('del');\n// @dynamicTask\n// export class WebDefaultTasks implements IDynamicTasks {\n//     tasks(): IDynamicTaskOption[] {\n//         return [\n//             {\n//                 name: 'clean',\n//                 order: 0,\n//                 oper: Operation.clean | Operation.default,\n//                 task: (ctx, dt) => del(ctx.getSrc(dt))\n//             }\n//         ];\n//     }\n// }\nlet Clean = class Clean {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'clean';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let info = this.getInfo();\n        let tkn = ctx.subTaskName(info);\n        gulp.task(tkn, () => {\n            return del(ctx.getSrc(info));\n        });\n        return tkn;\n    }\n};\nClean = __decorate([\n    development_core_1.task({\n        order: 0,\n        oper: development_core_1.Operation.clean | development_core_1.Operation.default\n    }), \n    __metadata('design:paramtypes', [Object])\n], Clean);\nexports.Clean = Clean;\nlet BuildTest = class BuildTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.karmaConfigFile || path.join(ctx.env.root, './karma.conf.js');\n            if (!path.isAbsolute(karmaConfigFile)) {\n                karmaConfigFile = path.join(ctx.env.root, karmaConfigFile);\n            }\n            let cfg = null;\n            if (option.karmaConfig) {\n                cfg = option.karmaConfig(ctx);\n            }\n            new karma_1.Server(_.extend(cfg || { basePath: ctx.getDist(), singleRun: ctx.env.watch !== true }, {\n                configFile: karmaConfigFile,\n            }), (code) => {\n                if (code === 1) {\n                    console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(code));\n                    callback('Unit Test failures, exiting process');\n                }\n                else {\n                    console.log('Unit Tests passed', ', code:', chalk.cyan(code));\n                    callback();\n                }\n            }).start();\n        });\n        return tkn;\n    }\n};\nBuildTest = __decorate([\n    development_core_1.task({\n        order: 0.25,\n        oper: development_core_1.Operation.build | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], BuildTest);\nexports.BuildTest = BuildTest;\nlet DeployTest = class DeployTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.karmaConfigFile || path.join(ctx.env.root, './karma.conf.js');\n            if (!path.isAbsolute(karmaConfigFile)) {\n                karmaConfigFile = path.join(ctx.env.root, karmaConfigFile);\n            }\n            let cfg = null;\n            if (option.karmaConfig) {\n                cfg = option.karmaConfig(ctx);\n            }\n            new karma_1.Server(_.extend(cfg || { basePath: ctx.getDist(), singleRun: true }, {\n                configFile: karmaConfigFile\n            }), (code) => {\n                if (code === 1) {\n                    console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(code));\n                    callback('Unit Test failures, exiting process');\n                }\n                else {\n                    console.log('Unit Tests passed', ', code:', chalk.cyan(code));\n                    callback();\n                }\n            }).start();\n        });\n        return tkn;\n    }\n};\nDeployTest = __decorate([\n    development_core_1.task({\n        order: 0.25,\n        oper: development_core_1.Operation.deploy | development_core_1.Operation.release | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], DeployTest);\nexports.DeployTest = DeployTest;\nlet StartService = class StartService {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'serve';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let dist = ctx.getDist(this.getInfo());\n        option.browsersync = option.browsersync || {\n            server: {\n                baseDir: dist\n            },\n            open: true,\n            port: process.env.PORT || 3000,\n            files: `${dist}/**/*`\n        };\n        let tkn = ctx.subTaskName('browsersync');\n        gulp.task(tkn, (callback) => {\n            browserSync(option.browsersync, (err, bs) => {\n                if (err) {\n                    callback(err);\n                }\n            });\n        });\n        return tkn;\n    }\n};\nStartService = __decorate([\n    development_core_1.task({\n        order: 1,\n        oper: development_core_1.Operation.default | development_core_1.Operation.serve\n    }), \n    __metadata('design:paramtypes', [Object])\n], StartService);\nexports.StartService = StartService;\n"]}