{"version":3,"sources":["tasks/webDefaultTask.js"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","development_core_1","require","karma_1","path","del","Clean","info","_classCallCheck","this","_createClass","value","name","ctx","gulp","tkn","task","getSrc","order","oper","Operation","clean","default","exports","BuildTest","option","subTaskName","getInfo","karmaConfigFile","join","env","root","cfg","karmaConfig","Server","extend","configFile","callback","start","build","test","DeployTest","isAbsolute","code","console","log","release","StartService","browsersync","server","open","port","process","PORT","files","dist","browserSync","err","bs","serve"],"mappings":"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","file":"../../tasks/webDefaultTask.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\n// import * as path from 'path';\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst karma_1 = require('karma');\nconst path = require('path');\nconst browserSync = require('browser-sync');\nconst del = require('del');\n// @dynamicTask\n// export class WebDefaultTasks implements IDynamicTasks {\n//     tasks(): IDynamicTaskOption[] {\n//         return [\n//             {\n//                 name: 'clean',\n//                 order: 0,\n//                 oper: Operation.clean | Operation.default,\n//                 task: (ctx, dt) => del(ctx.getSrc(dt))\n//             }\n//         ];\n//     }\n// }\nlet Clean = class Clean {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'clean';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let info = this.getInfo();\n        let tkn = ctx.subTaskName(info);\n        gulp.task(tkn, () => {\n            return del(ctx.getSrc(info));\n        });\n        return tkn;\n    }\n};\nClean = __decorate([\n    development_core_1.task({\n        order: 0,\n        oper: development_core_1.Operation.clean | development_core_1.Operation.default\n    }), \n    __metadata('design:paramtypes', [Object])\n], Clean);\nexports.Clean = Clean;\nlet BuildTest = class BuildTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.karmaConfigFile || path.join(ctx.env.root, './karma.conf.js');\n            if (!path.isAbsolute(karmaConfigFile)) {\n                karmaConfigFile = path.join(ctx.env.root, karmaConfigFile);\n            }\n            let cfg = null;\n            if (option.karmaConfig) {\n                cfg = option.karmaConfig(ctx);\n            }\n            new karma_1.Server(_.extend(cfg || {}, {\n                configFile: karmaConfigFile\n            }), callback).start();\n        });\n        return tkn;\n    }\n};\nBuildTest = __decorate([\n    development_core_1.task({\n        order: 0.25,\n        oper: development_core_1.Operation.build | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], BuildTest);\nexports.BuildTest = BuildTest;\nlet DeployTest = class DeployTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.karmaConfigFile || path.join(ctx.env.root, './karma.conf.js');\n            if (!path.isAbsolute(karmaConfigFile)) {\n                karmaConfigFile = path.join(ctx.env.root, karmaConfigFile);\n            }\n            let cfg = null;\n            if (option.karmaConfig) {\n                cfg = option.karmaConfig(ctx);\n            }\n            new karma_1.Server(_.extend(cfg || {}, {\n                configFile: karmaConfigFile,\n                singleRun: true\n            }), (code) => {\n                if (code === 1) {\n                    console.log('Unit Test failures, exiting process');\n                    callback('Unit Test Failures');\n                }\n                else {\n                    console.log('Unit Tests passed');\n                    callback();\n                }\n            }).start();\n        });\n        return tkn;\n    }\n};\nDeployTest = __decorate([\n    development_core_1.task({\n        order: 0.25,\n        oper: development_core_1.Operation.deploy | development_core_1.Operation.release | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], DeployTest);\nexports.DeployTest = DeployTest;\nlet StartService = class StartService {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'serve';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let dist = ctx.getDist(this.getInfo());\n        option.browsersync = option.browsersync || {\n            server: {\n                baseDir: dist\n            },\n            open: true,\n            port: process.env.PORT || 3000,\n            files: `${dist}/**/*`\n        };\n        let tkn = ctx.subTaskName('browsersync');\n        gulp.task(tkn, (callback) => {\n            browserSync(option.browsersync, (err, bs) => {\n                if (err) {\n                    callback(err);\n                }\n            });\n        });\n        return tkn;\n    }\n};\nStartService = __decorate([\n    development_core_1.task({\n        order: 1,\n        oper: development_core_1.Operation.default | development_core_1.Operation.serve\n    }), \n    __metadata('design:paramtypes', [Object])\n], StartService);\nexports.StartService = StartService;\n"]}