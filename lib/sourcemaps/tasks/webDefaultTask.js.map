{"version":3,"sources":["tasks/webDefaultTask.js"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","development_core_1","require","karma_1","path","browserSync","Clean","info","_classCallCheck","this","_createClass","value","name","ctx","gulp","tkn","task","callback","del","getSrc","order","oper","Operation","clean","default","exports","BuildTest","option","subTaskName","getInfo","karmaConfigFile","join","env","root","cfg","karmaConfig","Server","_","extend","configFile","start","build","test","DeployTest","isAbsolute","code","console","log","deploy","release","StartService","browsersync","server","open","port","process","PORT","files","dist","err","bs","serve"],"mappings":"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","file":"../../tasks/webDefaultTask.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n// import * as path from 'path';\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst karma_1 = require('karma');\nconst path = require('path');\nconst browserSync = require('browser-sync');\nconst del = require('del');\n// @dynamicTask\n// export class WebDefaultTasks implements IDynamicTasks {\n//     tasks(): IDynamicTaskOption[] {\n//         return [\n//             {\n//                 name: 'clean',\n//                 order: 0,\n//                 oper: Operation.clean | Operation.default,\n//                 task: (ctx, dt) => del(ctx.getSrc(dt))\n//             }\n//         ];\n//     }\n// }\nlet Clean = class Clean {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'clean';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let info = this.getInfo();\n        let tkn = ctx.subTaskName(info);\n        gulp.task(tkn, (callback) => {\n            del(ctx.getSrc(info));\n        });\n        return tkn;\n    }\n};\nClean = __decorate([\n    development_core_1.task({\n        order: 0,\n        oper: development_core_1.Operation.clean | development_core_1.Operation.default\n    }), \n    __metadata('design:paramtypes', [Object])\n], Clean);\nexports.Clean = Clean;\nlet BuildTest = class BuildTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.karmaConfigFile || path.join(ctx.env.root, './karma.conf.js');\n            if (!path.isAbsolute(karmaConfigFile)) {\n                karmaConfigFile = path.join(ctx.env.root, karmaConfigFile);\n            }\n            let cfg = null;\n            if (option.karmaConfig) {\n                cfg = option.karmaConfig(ctx);\n            }\n            new karma_1.Server(_.extend(cfg || {}, {\n                configFile: karmaConfigFile\n            }), callback).start();\n        });\n        return tkn;\n    }\n};\nBuildTest = __decorate([\n    development_core_1.task({\n        order: 0.25,\n        oper: development_core_1.Operation.build | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], BuildTest);\nexports.BuildTest = BuildTest;\nlet DeployTest = class DeployTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.karmaConfigFile || path.join(ctx.env.root, './karma.conf.js');\n            if (!path.isAbsolute(karmaConfigFile)) {\n                karmaConfigFile = path.join(ctx.env.root, karmaConfigFile);\n            }\n            let cfg = null;\n            if (option.karmaConfig) {\n                cfg = option.karmaConfig(ctx);\n            }\n            new karma_1.Server(_.extend(cfg || {}, {\n                configFile: karmaConfigFile\n            }), (code) => {\n                if (code === 1) {\n                    console.log('Unit Test failures, exiting process');\n                    callback('Unit Test Failures');\n                }\n                else {\n                    console.log('Unit Tests passed');\n                    callback();\n                }\n            }).start();\n        });\n        return tkn;\n    }\n};\nDeployTest = __decorate([\n    development_core_1.task({\n        order: 0.25,\n        oper: development_core_1.Operation.deploy | development_core_1.Operation.release | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], DeployTest);\nexports.DeployTest = DeployTest;\nlet StartService = class StartService {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'serve';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let dist = ctx.getDist(this.getInfo());\n        option.browsersync = option.browsersync || {\n            server: {\n                baseDir: dist\n            },\n            open: true,\n            port: process.env.PORT || 3000,\n            files: `${dist}/**/*`\n        };\n        let tkn = ctx.subTaskName('browsersync');\n        gulp.task(tkn, (callback) => {\n            browserSync(option.browsersync, (err, bs) => {\n                if (err) {\n                    callback(err);\n                }\n            });\n        });\n        return tkn;\n    }\n};\nStartService = __decorate([\n    development_core_1.task({\n        order: 1,\n        oper: development_core_1.Operation.default | development_core_1.Operation.serve\n    }), \n    __metadata('design:paramtypes', [Object])\n], StartService);\nexports.StartService = StartService;\n"]}