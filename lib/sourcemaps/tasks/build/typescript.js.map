{"version":3,"sources":["tasks/build/typescript.ts"],"names":[],"mappings":";AAEA,mCAAsC,kBAAkB,CAAC,CAAA;AACzD,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,MAAM,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,MAAM,EAAE,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACtC,MAAM,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC9C,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEhC,iBAAS,CAAC,IAAU,EAAE,MAAkB;IACpC,IAAI,MAAM,GAAiC,MAAM,CAAC,MAAM,CAAC;IACzD,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,QAAQ,IAAI,iBAAiB,CAAC,CAAC;IAC/E,IAAI,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAE1C,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAEzC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,4BAAS,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,4BAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;iBAC1D,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;iBACzB,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAEvB,MAAM,CAAC,KAAK,CAAC;gBAET,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACpC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;iBAC1D,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;iBACzB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;iBACvB,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAEvB,MAAM,CAAC,KAAK,CAAC;gBAET,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC3E,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;AACL,CAAC,CAAA","file":"../../../tasks/build/typescript.js","sourcesContent":["import { Gulp } from 'gulp';\r\nimport { WebTaskOption } from '../../task';\r\nimport { Operation, TaskConfig } from 'development-tool';\r\nimport * as path from 'path';\r\n\r\nconst cache = require('gulp-cached');\r\nconst ts = require('gulp-typescript');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst merge = require('merge2');\r\n\r\nexport = (gulp: Gulp, config: TaskConfig) => {\r\n    let option: WebTaskOption = <WebTaskOption>config.option;\r\n    let tscfile = path.join(config.env.root, option.tsconfig || './tsconfig.json');\r\n    let tsProject = ts.createProject(tscfile);\r\n\r\n    let dist = config.getDist(config.option);\r\n    // no sourcemaps.\r\n    if (config.oper === Operation.deploy || config.oper === Operation.release) {\r\n        gulp.task('tscompile', () => {\r\n            let tsResult = gulp.src(option.ts || (option.src + '/**/*.ts'))\r\n                .pipe(cache('typescript'))\r\n                .pipe(tsProject());\r\n\r\n            return merge([\r\n                // Merge the two output streams, so this task is finished when the IO of both operations are done. \r\n                tsResult.dts.pipe(gulp.dest(dist)),\r\n                tsResult.js.pipe(gulp.dest(dist))\r\n            ]);\r\n        });\r\n    } else {\r\n        gulp.task('tscompile', () => {\r\n            let tsResult = gulp.src(option.ts || (option.src + '/**/*.ts'))\r\n                .pipe(cache('typescript'))\r\n                .pipe(sourcemaps.init())\r\n                .pipe(tsProject());\r\n\r\n            return merge([\r\n                // Merge the two output streams, so this task is finished when the IO of both operations are done. \r\n                tsResult.dts.pipe(gulp.dest(dist)),\r\n                tsResult.js.pipe(sourcemaps.write('./sourcemaps')).pipe(gulp.dest(dist))\r\n            ]);\r\n        });\r\n    }\r\n}\r\n"]}