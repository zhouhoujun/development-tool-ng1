{"version":3,"sources":["tasks/serve.js","tasks/serve.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","require","development_core_1","browserSync","StartServer","info","_classCallCheck","this","_createClass","value","name","ctx","gulp","option","browsersync","files","isFunction","pkg","getPackage","packagePath","jspm","packages","toRootPath","toStr","directories","push","dist","getDist","getInfo","baseDir","toRootSrc","browsersyncOption","server","open","port","process","env","PORT","extend","tkn","subTaskName","task","callback","err","bs","order","total","test","runWay","RunWay","parallel","oper","Operation","default","serve","exports"],"mappings":"AAAA,+kBACIA,WAA0C,SAAUC,EAAYC,EAAQC,EAAKC,GAC7E,GAA2HC,GAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,CACrH,IAAuB,YAAnB,mBAAOQ,SAAP,YAAAC,QAAOD,WAAoD,kBAArBA,SAAQE,SAAyBL,EAAIG,QAAQE,SAASb,EAAYC,EAAQC,EAAKC,OACpH,KAAK,GAAIW,GAAId,EAAWO,OAAS,EAAGO,GAAK,EAAGA,KAASV,EAAIJ,EAAWc,MAAIN,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,EAChJ,OAAOH,GAAI,GAAKG,GAAKC,OAAOM,eAAed,EAAQC,EAAKM,GAAIA,GAE5DQ,WAA0C,SAAUC,EAAGC,GANvDnB,GAAc,YAAdA,mBAAAA,SAAAA,YAAAA,QAAAA,WAAoDC,kBAAzBD,SAAeoB,SAAsBlB,MAAQC,SAA9BiB,SAAyCF,EAAAC,ICD3EE,EAACC,QAAM,UAGnBC,mBAAAD,QAA6E,oBAEjEE,YAAWF,QAAM,gBAM7BG,YAAAA,WACI,QAAAA,GAAoBC,GAAeC,gBAAAC,KAAAH,GAAfG,KAAAF,KAAAA,EADxB,MAAAG,cAAAJ,IAAAtB,IAAA,UAAA2B,MAAA,WAKQ,MADAF,MAAKF,KAAKK,KAAOH,KAAKF,KAAKK,MAAQ,YAC5BH,KAAKF,QALpBvB,IAAA,QAAA2B,MAAA,SAOUE,EAAmBC,GACrB,GAAIC,GAA0BF,EAAIE,OAAQC,gBACtCC,EAAkB,IAClBF,GAAOE,QACPA,EAAQf,EAAEgB,WAAWH,EAAOE,OAASF,EAAOE,MAAMJ,GAAOE,EAAOE,OAEpEA,EAAQA,KACR,IAAIE,GAAMN,EAAIO,aACVC,EAAc,EACdN,GAAOO,MAAQP,EAAOO,KAAKC,SAC3BF,EAAcR,EAAIW,WAAWX,EAAIY,MAAMV,EAAOO,KAAKC,WAE/CJ,EAAIG,MAAQH,EAAIG,MAAQH,EAAIG,KAAKI,cACjCL,EAAcR,EAAIW,WAAWL,EAAIG,KAAKI,YAAYH,WAItDF,GACAJ,EAAMU,KAAQN,EAAd,QAGJ,IAAIO,GAAOf,EAAIgB,QAAQpB,KAAKqB,WACxBC,EAAe,IAEfA,GADAhB,EAAOgB,QACGlB,EAAImB,UAAU9B,EAAEgB,WAAWH,EAAOgB,SAAWhB,EAAOgB,QAAQlB,GAAOE,EAAOgB,SAE1EH,EAGdX,EAAMU,KAAQC,EAAd,QAEA,IAAIK,IACAC,QACIH,QAASA,GAEbI,MAAM,EACNC,KAAMC,QAAQC,IAAIC,MAAQ,IAC1BtB,MAAOA,EAGPF,GAAOC,cACPiB,EAAoB/B,EAAEsC,OAAOP,EAAmB/B,EAAEgB,WAAWH,EAAOC,aAAeD,EAAOC,YAAYH,EAAKoB,GAAqBlB,EAAOC,aAE3I,IAAIyB,GAAM5B,EAAI6B,YAAYjC,KAAKF,KAS/B,OARAO,GAAK6B,KAAKF,EAAK,SAACG,GACZvC,YAAY4B,EAAmB,SAACY,EAAKC,GAC7BD,GACAD,EAAcC,OAKnBJ,MA3DfnC,IAJAA,aAAAzB,YAACuB,mBAAAuC,MACGI,MAAO,SAACC,EAAOnC,GAAR,MAAgBA,GAAIyB,IAAIW,MAAStC,MAAO,IAAMuC,OAAQ9C,mBAAA+C,OAAOC,UAAa,GACjFC,KAAMjD,mBAAAkD,UAAUC,QAAUnD,mBAAAkD,UAAUE,QAsD5BnD,WAAAA,qBAAY4B,UACR3B,aArDHmD,QAAAnD,YAAWA","file":"../../tasks/serve.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst development_core_1 = require('development-core');\nconst browserSync = require('browser-sync');\nlet StartServer = class StartServer {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'web-serve';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option.browsersync || {};\n        let files = null;\n        if (option.files) {\n            files = _.isFunction(option.files) ? option.files(ctx) : option.files;\n        }\n        files = files || [];\n        let pkg = ctx.getPackage();\n        let packagePath = '';\n        if (option.jspm && option.jspm.packages) {\n            packagePath = ctx.toRootPath(ctx.toStr(option.jspm.packages));\n        }\n        else {\n            if (pkg.jspm && pkg.jspm && pkg.jspm.directories) {\n                packagePath = ctx.toRootPath(pkg.jspm.directories.packages);\n            }\n        }\n        if (packagePath) {\n            files.push(`${packagePath}/**/*`);\n        }\n        let dist = ctx.getDist(this.getInfo());\n        let baseDir = null;\n        if (option.baseDir) {\n            baseDir = ctx.toRootSrc(_.isFunction(option.baseDir) ? option.baseDir(ctx) : option.baseDir);\n        }\n        else {\n            baseDir = dist;\n        }\n        files.push(`${dist}/**/*`);\n        let browsersyncOption = {\n            server: {\n                baseDir: baseDir\n            },\n            open: true,\n            port: process.env.PORT || 3000,\n            files: files\n        };\n        if (option.browsersync) {\n            browsersyncOption = _.extend(browsersyncOption, _.isFunction(option.browsersync) ? option.browsersync(ctx, browsersyncOption) : option.browsersync);\n        }\n        let tkn = ctx.subTaskName(this.info);\n        gulp.task(tkn, (callback) => {\n            browserSync(browsersyncOption, (err, bs) => {\n                if (err) {\n                    callback(err);\n                }\n            });\n        });\n        return tkn;\n    }\n};\nStartServer = __decorate([\n    development_core_1.task({\n        order: (total, ctx) => ctx.env.test ? { value: 0.25, runWay: development_core_1.RunWay.parallel } : 1,\n        oper: development_core_1.Operation.default | development_core_1.Operation.serve\n    }), \n    __metadata('design:paramtypes', [Object])\n], StartServer);\nexports.StartServer = StartServer;\n","import * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\nimport { TaskCallback, Gulp } from 'gulp';\r\nimport { Src, ITask, ITaskInfo, Operation, task, ITaskContext, RunWay } from 'development-core';\r\nimport { IWebTaskOption } from '../WebTaskOption';\r\nimport * as browserSync from 'browser-sync';\r\n\r\n@task({\r\n    order: (total, ctx) => ctx.env.test ? { value: 0.25, runWay: RunWay.parallel } : 1, // last order.\r\n    oper: Operation.default | Operation.serve\r\n})\r\nexport class StartServer implements ITask {\r\n    constructor(private info: ITaskInfo) {\r\n    }\r\n    getInfo() {\r\n        this.info.name = this.info.name || 'web-serve';\r\n        return this.info;\r\n    }\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        let option = (<IWebTaskOption>ctx.option).browsersync || {};\r\n        let files: string[] = null;\r\n        if (option.files) {\r\n            files = _.isFunction(option.files) ? option.files(ctx) : option.files;\r\n        }\r\n        files = files || [];\r\n        let pkg = ctx.getPackage();\r\n        let packagePath = '';\r\n        if (option.jspm && option.jspm.packages) {\r\n            packagePath = ctx.toRootPath(ctx.toStr(option.jspm.packages));\r\n        } else {\r\n            if (pkg.jspm && pkg.jspm && pkg.jspm.directories) {\r\n                packagePath = ctx.toRootPath(pkg.jspm.directories.packages);\r\n            }\r\n        }\r\n\r\n        if (packagePath) {\r\n            files.push(`${packagePath}/**/*`)\r\n        }\r\n\r\n        let dist = ctx.getDist(this.getInfo());\r\n        let baseDir: Src = null;\r\n        if (option.baseDir) {\r\n            baseDir = ctx.toRootSrc(_.isFunction(option.baseDir) ? option.baseDir(ctx) : option.baseDir);\r\n        } else {\r\n            baseDir = dist;\r\n        }\r\n\r\n        files.push(`${dist}/**/*`);\r\n\r\n        let browsersyncOption = {\r\n            server: {\r\n                baseDir: baseDir\r\n            },\r\n            open: true,\r\n            port: process.env.PORT || 3000,\r\n            files: files\r\n        };\r\n\r\n        if (option.browsersync) {\r\n            browsersyncOption = _.extend(browsersyncOption, _.isFunction(option.browsersync) ? option.browsersync(ctx, browsersyncOption) : option.browsersync);\r\n        }\r\n        let tkn = ctx.subTaskName(this.info);\r\n        gulp.task(tkn, (callback: TaskCallback) => {\r\n            browserSync(browsersyncOption, (err, bs) => {\r\n                if (err) {\r\n                    callback(<any>err);\r\n                }\r\n            });\r\n        });\r\n\r\n        return tkn;\r\n    }\r\n}\r\n"]}