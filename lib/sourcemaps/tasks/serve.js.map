{"version":3,"sources":["tasks/serve.ts"],"names":["_","require","development_core_1","browserSync","path","StartServer","info","this","prototype","getInfo","name","setup","ctx","gulp","option","browsersync","files","isFunction","pkg","getPackage","packagePath","jspm","packages","toRootPath","toStr","directories","push","dist","getDist","baseDir","toRootSrc","isArray","relpkg","relative","first","test","getRootPath","uniq","browsersyncOption","server","open","port","process","env","PORT","extend","tkn","subTaskName","task","callback","err","bs","__decorate","order","total","value","runWay","RunWay","parallel","oper","Operation","default","serve","exports"],"mappings":"sgBAAAA,EAAAC,QAAA,UAGAC,mBAAAD,QAAA,oBAEAE,YAAAF,QAAA,gBACAG,KAAAH,QAAA,QAMaI,YAAW,WACpB,QAAAA,GAAoBC,GAAAC,KAAAD,KAAAA,EAkExB,MAhEID,GAAAG,UAAAC,QAAA,WAEI,MADAF,MAAKD,KAAKI,KAAOH,KAAKD,KAAKI,MAAQ,YAC5BH,KAAKD,MAEhBD,EAAAG,UAAAG,MAAA,SAAMC,EAAmBC,GACrB,GAAIC,GAA0BF,EAAIE,OAAQC,gBACtCC,EAAkB,IAClBF,GAAOE,QACPA,EAAQhB,EAAEiB,WAAWH,EAAOE,OAASF,EAAOE,MAAMJ,GAAOE,EAAOE,OAEpEA,EAAQA,KACR,IAAIE,GAAMN,EAAIO,aACVC,EAAc,EACdN,GAAOO,MAAQP,EAAOO,KAAKC,SAC3BF,EAAcR,EAAIW,WAAWX,EAAIY,MAAMV,EAAOO,KAAKC,WAE/CJ,EAAIG,MAAQH,EAAIG,MAAQH,EAAIG,KAAKI,cACjCL,EAAcR,EAAIW,WAAWL,EAAIG,KAAKI,YAAYH,WAItDF,GACAJ,EAAMU,KAAQN,EAAW,QAG7B,IAAIO,GAAOf,EAAIgB,QAAQrB,KAAKE,WACxBoB,EAAe,IAEfA,GADAf,EAAOe,QACGjB,EAAIkB,UAAU9B,EAAEiB,WAAWH,EAAOe,SAAWf,EAAOe,QAAQjB,GAAOE,EAAOe,SAE1EF,EAEdE,EAAU7B,EAAE+B,QAAQF,GAAWA,GAAWA,EAC1C,IAAIG,GAAS5B,KAAK6B,SAASjC,EAAEkC,MAAML,GAAUT,EACzC,SAAQe,KAAKH,KACbH,EAAQH,KAAKd,EAAIwB,eACjBP,EAAU7B,EAAEqC,KAAKR,IAGrBb,EAAMU,KAAQC,EAAI,QAElB,IAAIW,IACAC,QACIV,QAASA,GAEbW,MAAM,EACNC,KAAMC,QAAQC,IAAIC,MAAQ,IAC1B5B,MAAOA,EAGPF,GAAOC,cACPuB,EAAoBtC,EAAE6C,OAAOP,EAAmBtC,EAAEiB,WAAWH,EAAOC,aAAeD,EAAOC,YAAYH,EAAK0B,GAAqBxB,EAAOC,aAE3I,IAAI+B,GAAMlC,EAAImC,YAAYxC,KAAKD,KAS/B,OARAO,GAAKmC,KAAKF,EAAK,SAACG,GACZ9C,YAAYmC,EAAmB,SAACY,EAAKC,GAC7BD,GACAD,EAAcC,OAKnBJ,GAEfzC,IAnEaA,aAAW+C,YAJvBlD,mBAAA8C,MACGK,MAAO,SAACC,EAAO1C,GAAQ,MAAAA,GAAI+B,IAAIR,MAASoB,MAAO,EAAID,EAAOE,OAAQtD,mBAAAuD,OAAOC,UAAa,GACtFC,KAAMzD,mBAAA0D,UAAUC,QAAU3D,mBAAA0D,UAAUE,kDAE3BzD,aAAA0D,QAAA1D,YAAAA","file":"../../tasks/serve.js","sourcesContent":["import * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\nimport { TaskCallback, Gulp } from 'gulp';\r\nimport { Src, ITask, ITaskInfo, Operation, task, ITaskContext, RunWay } from 'development-core';\r\nimport { IWebTaskOption } from '../WebTaskOption';\r\nimport * as browserSync from 'browser-sync';\r\nimport * as path from 'path';\r\n\r\n@task({\r\n    order: (total, ctx) => ctx.env.test ? { value: 2 / total, runWay: RunWay.parallel } : 1, // last order.\r\n    oper: Operation.default | Operation.serve\r\n})\r\nexport class StartServer implements ITask {\r\n    constructor(private info: ITaskInfo) {\r\n    }\r\n    getInfo() {\r\n        this.info.name = this.info.name || 'web-serve';\r\n        return this.info;\r\n    }\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        let option = (<IWebTaskOption>ctx.option).browsersync || {};\r\n        let files: string[] = null;\r\n        if (option.files) {\r\n            files = _.isFunction(option.files) ? option.files(ctx) : option.files;\r\n        }\r\n        files = files || [];\r\n        let pkg = ctx.getPackage();\r\n        let packagePath = '';\r\n        if (option.jspm && option.jspm.packages) {\r\n            packagePath = ctx.toRootPath(ctx.toStr(option.jspm.packages));\r\n        } else {\r\n            if (pkg.jspm && pkg.jspm && pkg.jspm.directories) {\r\n                packagePath = ctx.toRootPath(pkg.jspm.directories.packages);\r\n            }\r\n        }\r\n\r\n        if (packagePath) {\r\n            files.push(`${packagePath}/**/*`)\r\n        }\r\n\r\n        let dist = ctx.getDist(this.getInfo());\r\n        let baseDir: Src = null;\r\n        if (option.baseDir) {\r\n            baseDir = ctx.toRootSrc(_.isFunction(option.baseDir) ? option.baseDir(ctx) : option.baseDir);\r\n        } else {\r\n            baseDir = dist;\r\n        }\r\n        baseDir = _.isArray(baseDir) ? baseDir : [baseDir];\r\n        let relpkg = path.relative(_.first(baseDir), packagePath);\r\n        if (/^\\.\\./.test(relpkg)) {\r\n            baseDir.push(ctx.getRootPath());\r\n            baseDir = _.uniq(baseDir);\r\n        }\r\n\r\n        files.push(`${dist}/**/*`);\r\n\r\n        let browsersyncOption = {\r\n            server: {\r\n                baseDir: baseDir\r\n            },\r\n            open: true,\r\n            port: process.env.PORT || 3000,\r\n            files: files\r\n        };\r\n\r\n        if (option.browsersync) {\r\n            browsersyncOption = _.extend(browsersyncOption, _.isFunction(option.browsersync) ? option.browsersync(ctx, browsersyncOption) : option.browsersync);\r\n        }\r\n        let tkn = ctx.subTaskName(this.info);\r\n        gulp.task(tkn, (callback: TaskCallback) => {\r\n            browserSync(browsersyncOption, (err, bs) => {\r\n                if (err) {\r\n                    callback(<any>err);\r\n                }\r\n            });\r\n        });\r\n\r\n        return tkn;\r\n    }\r\n}\r\n"]}