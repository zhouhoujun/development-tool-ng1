{"version":3,"sources":["tasks/test.js","tasks/test.ts"],"names":["getPackageFilePath","packagesPath","fileName","fm","path","join","exists","glob","sync","length","__decorate","decorators","target","key","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","require","chalk","development_core_1","karma","fs","mkdirp","url","KarmaTest","info","_classCallCheck","this","_createClass","value","name","ctx","gulp","_this","option","tkn","subTaskName","getInfo","task","callback","karmaConfigFile","configFile","env","root","toRootPath","cfg","set","config","extend","singleRun","release","deploy","watch","basePath","toStr","isUndefined","getDist","jspm","files","initkarmaJspmPlugin","serve","Server","code","console","log","red","cyan","start","rootpath","prefix","undefined","paths","bundleDest","dir","readdirSync","each","sf","f","lstatSync","isDirectory","p","toUrl","_this2","pkg","getPackage","karmajspm","isFunction","isBoolean","jspmcfg","adapterfile","checkAdapter","packages","directories","toDistSrc","toSrc","isString","map","it","baseURL","cachePackages","relpkg","relative","resetBase","test","getRootPath","getRelativePaths","rlpk","res","resource","relpth","proxies","push","pattern","toDistPath","included","abr","resolve","loadFiles","serveFiles","concat","plugins","filter","frameworks","toLowerCase","reporters","packname","dependencies","devDependencies","browsers","uniq","initJspm","client","emitter","addExpandedFiles","expandedFiles","flatten","file","flname","fileBasePath","createServedPattern","meta","useBundles","stripExtension","browserPath","browser","configPaths","Array","isArray","prototype","unshift","apply","configPath","createPattern","sysjs","systemjs","on","jspmPattern","nocache","watched","$inject","framework:jspmdev","template","templ","karmaloader","defaultTempl","getDefaultAdapter","__dirname","dirname","existsSync","writeFileSync","order","total","runWay","RunWay","parallel","oper","Operation","default","exports","served","pathstr"],"mappings":"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","file":"../../tasks/test.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst chalk = require('chalk');\n// import * as path from 'path';\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst karma = require('karma');\nconst fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\nconst mkdirp = require('mkdirp');\nconst url = require('url');\nlet KarmaTest = class KarmaTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'web-test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option.karma || {};\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.configFile || path.join(ctx.env.root, './karma.conf.js');\n            karmaConfigFile = ctx.toRootPath(karmaConfigFile);\n            let cfg = {};\n            // get config.\n            require(karmaConfigFile)({\n                set(config) {\n                    cfg = _.extend(cfg, config);\n                }\n            });\n            if (option.config) {\n                cfg = option.config(ctx);\n            }\n            cfg = _.extend(cfg, { singleRun: ctx.env.release || ctx.env.deploy || ctx.env.watch !== true });\n            if (option.basePath) {\n                cfg.basePath = ctx.toStr(option.basePath);\n            }\n            else if (_.isUndefined(cfg.basePath)) {\n                cfg.basePath = ctx.getDist();\n            }\n            cfg.basePath = ctx.toRootPath(cfg.basePath);\n            if (option.jspm) {\n                cfg.files = cfg.files || [];\n                cfg = this.initkarmaJspmPlugin(cfg, ctx);\n            }\n            let serve = new karma.Server(cfg, (code) => {\n                if (code === 1) {\n                    console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(code));\n                    callback('Unit Test failures, exiting process');\n                }\n                else {\n                    console.log('Unit Tests passed', ', code:', chalk.cyan(code));\n                    callback();\n                }\n            });\n            serve.start();\n        });\n        return tkn;\n    }\n    getRelativePaths(ctx, rootpath, prefix = '') {\n        let paths = {};\n        let bundleDest = ctx.getDist();\n        let dir = fs.readdirSync(bundleDest);\n        _.each(dir, (d) => {\n            let sf = path.join(bundleDest, d);\n            let f = fs.lstatSync(sf);\n            if (f.isDirectory()) {\n                let p = '/' + d + '/*';\n                paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\n            }\n        });\n        let p = '*';\n        paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\n        // let jpk = <string>option.jspmPackages;\n        // let jp = path.basename(jpk) + '/*';\n        // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\n        return paths;\n    }\n    initkarmaJspmPlugin(cfg, ctx) {\n        let option = ctx.option.karma || {};\n        let pkg = ctx.getPackage();\n        let karmajspm;\n        if (_.isFunction(option.jspm)) {\n            karmajspm = option.jspm(ctx);\n        }\n        else if (_.isBoolean(karma)) {\n            karmajspm = {};\n        }\n        else {\n            karmajspm = option.jspm;\n        }\n        let jspmcfg = cfg['jspm'] || {};\n        let adapterfile = ctx.toUrl(this.checkAdapter(karmajspm, ctx));\n        if (karmajspm.packages) {\n            jspmcfg.packages = ctx.toRootPath(ctx.toStr(karmajspm.packages));\n        }\n        else {\n            if (!jspmcfg.packages && pkg.jspm && pkg.jspm.directories) {\n                jspmcfg.packages = ctx.toRootPath(pkg.jspm.directories.packages);\n            }\n            else if (jspmcfg.packages) {\n                jspmcfg.packages = ctx.toRootPath(jspmcfg.packages);\n            }\n        }\n        if (karmajspm.config) {\n            jspmcfg.config = ctx.toDistSrc(ctx.toSrc(karmajspm.config));\n        }\n        else {\n            if (!jspmcfg.config && pkg.jspm) {\n                jspmcfg.config = ctx.toRootPath(pkg.jspm.configFile);\n            }\n            else if (jspmcfg.config) {\n                jspmcfg.config = ctx.toDistSrc(jspmcfg.config);\n            }\n        }\n        jspmcfg.config = _.isString(jspmcfg.config) ? ctx.toUrl(jspmcfg.config) : _.map(jspmcfg.config, it => ctx.toUrl(it));\n        jspmcfg.baseURL = ctx.toStr(karmajspm.baseURL || jspmcfg.baseURL || '');\n        if (!_.isUndefined(karmajspm.cachePackages)) {\n            jspmcfg.cachePackages = karmajspm.cachePackages;\n        }\n        let relpkg = path.relative(cfg.basePath, jspmcfg.packages);\n        let resetBase = false;\n        if (/^\\.\\./.test(relpkg)) {\n            resetBase = true;\n            let root = cfg.basePath = ctx.getRootPath();\n            jspmcfg.paths = this.getRelativePaths(ctx, cfg.basePath); // , 'base/');\n            let rlpk = ctx.toUrl(root, jspmcfg.packages) + '/*';\n            jspmcfg.paths[rlpk] = 'base/' + rlpk;\n            let res;\n            if (_.isFunction(karmajspm.resource)) {\n                res = karmajspm.resource(ctx);\n            }\n            else {\n                res = karmajspm.resource || ['public', 'asserts'];\n            }\n            let relpth = ctx.toUrl(root, ctx.getDist());\n            cfg.proxies = cfg.proxies || {};\n            cfg.files = cfg.files || [];\n            _.each(_.isString(res) ? [res] : res, r => {\n                cfg.files.push({ pattern: ctx.toUrl(ctx.toDistPath(r)) + '/**', included: false });\n                let abr = /^\\//.test(r) ? ('base' + r) : ('base/' + r);\n                cfg.proxies[abr] = url.resolve(relpth, r);\n            });\n            // jspmcfg.paths = jspmcfg.paths || {};\n            // jspmcfg.baseURL = ctx.toUrl(root, ctx.getDist());\n            // let rlpk = ctx.toUrl(root, jspmcfg.packages) + '/*';\n            // jspmcfg.paths[rlpk] = '/base/' + rlpk;\n            console.log('paths: ', jspmcfg.paths);\n            cfg.proxies = _.extend(cfg.proxies, jspmcfg.paths);\n        }\n        jspmcfg.loadFiles = jspmcfg.loadFiles || [];\n        jspmcfg.serveFiles = jspmcfg.serveFiles || [];\n        if (karmajspm.loadFiles) {\n            jspmcfg.loadFiles = jspmcfg.loadFiles.concat(_.isFunction(karmajspm.loadFiles) ? karmajspm.loadFiles(ctx) : karmajspm.loadFiles);\n        }\n        if (karmajspm.serveFiles) {\n            jspmcfg.serveFiles = jspmcfg.serveFiles.concat(_.isFunction(karmajspm.serveFiles) ? karmajspm.serveFiles(ctx) : karmajspm.serveFiles);\n        }\n        cfg.plugins = _.filter(cfg.plugins || [], it => it !== 'karma-jspm');\n        cfg.frameworks = _.filter(cfg.frameworks || [], it => it !== 'jspm');\n        // clean.\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.frameworks, it => 'karma-' + it.toLowerCase()));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.reporters, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-reporter';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.browsers, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-launcher';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = _.uniq(cfg.plugins);\n        let initJspm = (files, basePath, jspm, client, emitter) => {\n            console.log('--------------------init karma jspm---------------------\\n', 'base path:', chalk.cyan(basePath));\n            jspm = jspm || {};\n            jspm = _.extend(jspm || {}, jspmcfg);\n            client.jspm = client.jspm || {};\n            if (jspm.paths !== undefined && typeof jspm.paths === 'object') {\n                client.jspm.paths = jspm.paths;\n            }\n            if (jspm.meta !== undefined && typeof jspm.meta === 'object') {\n                client.jspm.meta = jspm.meta;\n            }\n            // Pass on options to client\n            client.jspm.useBundles = jspm.useBundles;\n            client.jspm.stripExtension = jspm.stripExtension;\n            let baseURL = jspm.baseURL;\n            client.jspm.baseURL = baseURL || '';\n            console.log('base URL:', chalk.cyan(baseURL));\n            let fileBasePath = ctx.toUrl(resetBase ? ctx.getDist() : path.join(basePath, baseURL));\n            console.log('fileBasePath', fileBasePath);\n            let packagesPath = ctx.toUrl(jspm.packages);\n            let browserPath = ctx.toUrl(ctx.toRootPath(ctx.toStr(jspm.browser || '')));\n            let configPaths = Array.isArray(jspm.config) ? jspm.config : [jspm.config];\n            // Add SystemJS loader and jspm config\n            Array.prototype.unshift.apply(files, configPaths.map((configPath) => {\n                return createPattern(configPath);\n            }));\n            // Needed for JSPM 0.17 beta\n            if (jspm.browser) {\n                files.unshift(createPattern(browserPath));\n            }\n            files.unshift(createPattern(adapterfile));\n            let sysjs = karmajspm.systemjs ? ctx.toSrc(karmajspm.systemjs) : ['system-polyfills.src', 'system.src'];\n            _.each(_.isArray(sysjs) ? sysjs : [sysjs], sf => {\n                files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, sf))));\n            });\n            function addExpandedFiles() {\n                client.jspm.expandedFiles = _.flatten(_.map(jspm.loadFiles, file => {\n                    let flname = path.join(fileBasePath, _.isString(file) ? file : file.pattern);\n                    files.push(createServedPattern(ctx.toUrl(flname), _.isString(file) ? null : file));\n                    return _.map(glob.sync(flname), (fm) => ctx.toUrl(fileBasePath, fm));\n                }));\n                console.log('expandedFiles:', client.jspm.expandedFiles);\n            }\n            addExpandedFiles();\n            emitter.on('file_list_modified', addExpandedFiles);\n            // Add served files to files array\n            _.each(jspm.serveFiles, file => {\n                files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern))));\n            });\n            // Allow Karma to serve all files within jspm_packages.\n            // This allows jspm/SystemJS to load them\n            var jspmPattern = createServedPattern(ctx.toUrl(path.join(packagesPath, '!(system-polyfills.src.js|system.src.js)/**')), { nocache: jspm.cachePackages !== true });\n            jspmPattern.watched = false;\n            files.push(jspmPattern);\n            console.log('------------------------complete jspm pattern:\\n', files);\n        };\n        initJspm.$inject = ['config.files', 'config.basePath', 'config.jspm', 'config.client', 'emitter'];\n        cfg.frameworks.unshift('jspmdev');\n        cfg.plugins.unshift({\n            'framework:jspmdev': ['factory', initJspm]\n        });\n        return cfg;\n    }\n    getDefaultAdapter() {\n        return {\n            name: 'adapter',\n            template: `\r\n(function(karma, System) {\r\n    if (!System) {\r\n        throw new Error('SystemJS was not found. Please make sure you have ' +\r\n            'initialized jspm via installing a dependency with jspm, ' +\r\n            'or by running \"jspm dl-loader\".');\r\n    }\r\n\r\n\r\n    System.config({ baseURL: karma.config.jspm.baseURL?  'base/'+ karma.config.jspm.baseURL : 'base' });\r\n    \r\n\r\n    var stripExtension = typeof karma.config.jspm.stripExtension === 'boolean' ? karma.config.jspm.stripExtension : true;\r\n\r\n    // Prevent immediately starting tests.\r\n    karma.loaded = function() {\r\n\r\n        if (karma.config.jspm.paths !== undefined &&\r\n            typeof karma.config.jspm.paths === 'object') {\r\n\r\n            System.config({\r\n                paths: karma.config.jspm.paths\r\n            });\r\n        }\r\n\r\n        if (karma.config.jspm.meta !== undefined &&\r\n            typeof karma.config.jspm.meta === 'object') {\r\n            System.config({\r\n                meta: karma.config.jspm.meta\r\n            });\r\n        }\r\n\r\n        // Exclude bundle configurations if useBundles option is not specified\r\n        if (!karma.config.jspm.useBundles) {\r\n            System.bundles = [];\r\n        }\r\n\r\n        // Load everything specified in loadFiles in the specified order\r\n        var promiseChain = Promise.resolve();\r\n        for (var i = 0; i < karma.config.jspm.expandedFiles.length; i++) {\r\n            promiseChain = promiseChain.then((function(moduleName) {\r\n                return function() {\r\n                    return System['import'](moduleName);\r\n                };\r\n            })(extractModuleName(karma.config.jspm.expandedFiles[i])));\r\n        }\r\n\r\n        promiseChain.then(function() {\r\n            karma.start();\r\n        }, function(e) {\r\n            karma.error(e.name + ': ' + e.message);\r\n        });\r\n    };\r\n\r\n    function extractModuleName(fileName) {\r\n        if (stripExtension) {\r\n            return fileName.replace(/\\.js$/, '');\r\n        }\r\n        return fileName;\r\n    }\r\n})(window.__karma__, window.System);`\n        };\n    }\n    checkAdapter(karmajspm, ctx) {\n        let templ = karmajspm.karmaloader;\n        let defaultTempl = this.getDefaultAdapter();\n        if (!templ) {\n            templ = defaultTempl;\n        }\n        else {\n            if (templ.name === defaultTempl.name) {\n                console.log(chalk.red('can not rewrite default adapter named: \"adapter\".'));\n                templ = defaultTempl;\n            }\n        }\n        let adapterfile = path.join(__dirname, './adapters', templ.name);\n        if (!/.js$/.test(adapterfile)) {\n            adapterfile = adapterfile + '.js';\n        }\n        mkdirp.sync(path.dirname(adapterfile));\n        if (!fs.existsSync(adapterfile)) {\n            fs.writeFileSync(adapterfile, templ.template, 'utf8');\n        }\n        return adapterfile;\n    }\n};\nKarmaTest = __decorate([\n    development_core_1.task({\n        order: total => { return { value: 2 / total, runWay: development_core_1.RunWay.parallel }; },\n        oper: development_core_1.Operation.default | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], KarmaTest);\nexports.KarmaTest = KarmaTest;\nfunction getPackageFilePath(packagesPath, fileName) {\n    let fm = path.join(packagesPath, fileName + '@*.js');\n    var exists = glob.sync(fm);\n    if (exists && exists.length !== 0) {\n        return fm;\n    }\n    else {\n        return path.join(packagesPath, fileName + '.js');\n    }\n}\nconst createPattern = function (path) {\n    return { pattern: path, included: true, served: true, watched: false };\n};\nconst createServedPattern = function (pathstr, file) {\n    return {\n        pattern: pathstr,\n        included: file && 'included' in file ? file.included : false,\n        served: file && 'served' in file ? file.served : true,\n        nocache: file && 'nocache' in file ? file.nocache : false,\n        watched: file && 'watched' in file ? file.watched : true\n    };\n};\n","import * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\nimport { TaskCallback, Gulp } from 'gulp';\r\n// import * as path from 'path';\r\nimport { Src, ITask, ITaskInfo, Operation, task, ITaskContext, RunWay } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nimport * as karma from 'karma';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nconst glob = require('glob');\r\nconst mkdirp = require('mkdirp');\r\nimport * as url from 'url';\r\n// import * as mocha from 'gulp-mocha';\r\nimport { IWebTaskOption, KarmaJspmOption, KarmaJspm } from '../WebTaskOption';\r\n\r\n@task({\r\n    order: total => { return { value: 2 / total, runWay: RunWay.parallel } },\r\n    oper: Operation.default | Operation.test\r\n})\r\nexport class KarmaTest implements ITask {\r\n    constructor(private info: ITaskInfo) {\r\n    }\r\n    getInfo() {\r\n        this.info.name = this.info.name || 'web-test';\r\n        return this.info;\r\n    }\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        let option = (<IWebTaskOption>ctx.option).karma || {};\r\n\r\n        let tkn = ctx.subTaskName(this.getInfo());\r\n        gulp.task(tkn, (callback: TaskCallback) => {\r\n            let karmaConfigFile = option.configFile || path.join(ctx.env.root, './karma.conf.js');\r\n            karmaConfigFile = ctx.toRootPath(karmaConfigFile);\r\n            let cfg: karma.ConfigOptions = {};\r\n            // get config.\r\n            require(karmaConfigFile)({\r\n                set(config) {\r\n                    cfg = _.extend(cfg, config);\r\n                }\r\n            });\r\n            if (option.config) {\r\n                cfg = option.config(ctx);\r\n            }\r\n\r\n            cfg = <karma.ConfigOptions>_.extend(cfg, { singleRun: ctx.env.release || ctx.env.deploy || ctx.env.watch !== true });\r\n            if (option.basePath) {\r\n                cfg.basePath = ctx.toStr(option.basePath);\r\n            } else if (_.isUndefined(cfg.basePath)) {\r\n                cfg.basePath = ctx.getDist();\r\n            }\r\n\r\n            cfg.basePath = ctx.toRootPath(cfg.basePath);\r\n\r\n            if (option.jspm) {\r\n                cfg.files = cfg.files || [];\r\n                cfg = this.initkarmaJspmPlugin(cfg, ctx);\r\n            }\r\n\r\n            let serve = new karma.Server(\r\n                cfg,\r\n                (code: number) => {\r\n                    if (code === 1) {\r\n                        console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(<any>code));\r\n                        callback(<any>'Unit Test failures, exiting process');\r\n                    } else {\r\n                        console.log('Unit Tests passed', ', code:', chalk.cyan(<any>code));\r\n                        callback();\r\n                    }\r\n                });\r\n\r\n            serve.start();\r\n        });\r\n\r\n        return tkn;\r\n    }\r\n\r\n    getRelativePaths(ctx: ITaskContext, rootpath: string, prefix = '') {\r\n        let paths: any = {};\r\n        let bundleDest = ctx.getDist();\r\n        let dir = fs.readdirSync(bundleDest);\r\n        _.each(dir, (d: string) => {\r\n\r\n            let sf = path.join(bundleDest, d);\r\n            let f = fs.lstatSync(sf);\r\n            if (f.isDirectory()) {\r\n                let p = '/' + d + '/*';\r\n                paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\r\n            }\r\n        });\r\n        let p = '*'\r\n        paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\r\n        // let jpk = <string>option.jspmPackages;\r\n        // let jp = path.basename(jpk) + '/*';\r\n        // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\r\n\r\n        return paths;\r\n    }\r\n\r\n\r\n    initkarmaJspmPlugin(cfg: karma.ConfigOptions, ctx: ITaskContext): karma.ConfigOptions {\r\n        let option = (<IWebTaskOption>ctx.option).karma || {};\r\n        let pkg = ctx.getPackage();\r\n\r\n        let karmajspm: KarmaJspmOption;\r\n        if (_.isFunction(option.jspm)) {\r\n            karmajspm = option.jspm(ctx);\r\n        } else if (_.isBoolean(karma)) {\r\n            karmajspm = {};\r\n        } else {\r\n            karmajspm = option.jspm;\r\n        }\r\n        let jspmcfg: KarmaJspm = cfg['jspm'] || {};\r\n\r\n        let adapterfile = ctx.toUrl(this.checkAdapter(karmajspm, ctx));\r\n\r\n        if (karmajspm.packages) {\r\n            jspmcfg.packages = ctx.toRootPath(ctx.toStr(karmajspm.packages));\r\n        } else {\r\n            if (!jspmcfg.packages && pkg.jspm && pkg.jspm.directories) {\r\n                jspmcfg.packages = ctx.toRootPath(pkg.jspm.directories.packages);\r\n            } else if (jspmcfg.packages) {\r\n                jspmcfg.packages = ctx.toRootPath(jspmcfg.packages);\r\n            }\r\n        }\r\n        if (karmajspm.config) {\r\n            jspmcfg.config = ctx.toDistSrc(ctx.toSrc(karmajspm.config));\r\n        } else {\r\n            if (!jspmcfg.config && pkg.jspm) {\r\n                jspmcfg.config = ctx.toRootPath(pkg.jspm.configFile);\r\n            } else if (jspmcfg.config) {\r\n                jspmcfg.config = ctx.toDistSrc(jspmcfg.config);\r\n            }\r\n        }\r\n\r\n        jspmcfg.config = _.isString(jspmcfg.config) ? ctx.toUrl(jspmcfg.config) : _.map(jspmcfg.config, it => ctx.toUrl(it));\r\n\r\n        jspmcfg.baseURL = ctx.toStr(karmajspm.baseURL || jspmcfg.baseURL || '');\r\n        if (!_.isUndefined(karmajspm.cachePackages)) {\r\n            jspmcfg.cachePackages = karmajspm.cachePackages;\r\n        }\r\n\r\n        let relpkg = path.relative(cfg.basePath, jspmcfg.packages);\r\n        let resetBase = false;\r\n        if (/^\\.\\./.test(relpkg)) {\r\n            resetBase = true;\r\n            let root = cfg.basePath = ctx.getRootPath();\r\n            jspmcfg.paths = this.getRelativePaths(ctx, cfg.basePath); // , 'base/');\r\n            let rlpk = ctx.toUrl(root, jspmcfg.packages) + '/*';\r\n            jspmcfg.paths[rlpk] = 'base/' + rlpk;\r\n\r\n            let res: Src;\r\n            if (_.isFunction(karmajspm.resource)) {\r\n                res = karmajspm.resource(ctx);\r\n            } else {\r\n                res = karmajspm.resource || ['public', 'asserts'];\r\n            }\r\n            let relpth = ctx.toUrl(root, ctx.getDist());\r\n            cfg.proxies = cfg.proxies || {};\r\n            cfg.files = cfg.files || [];\r\n            _.each(_.isString(res) ? [res] : res, r => {\r\n                cfg.files.push({ pattern: ctx.toUrl(ctx.toDistPath(r)) + '/**', included: false });\r\n\r\n                let abr = /^\\//.test(r) ? ('base' + r) : ('base/' + r);\r\n                cfg.proxies[abr] = url.resolve(relpth, r);\r\n            });\r\n\r\n            // jspmcfg.paths = jspmcfg.paths || {};\r\n            // jspmcfg.baseURL = ctx.toUrl(root, ctx.getDist());\r\n            // let rlpk = ctx.toUrl(root, jspmcfg.packages) + '/*';\r\n            // jspmcfg.paths[rlpk] = '/base/' + rlpk;\r\n            console.log('paths: ', jspmcfg.paths);\r\n\r\n            cfg.proxies = _.extend(cfg.proxies, jspmcfg.paths);\r\n        }\r\n\r\n        jspmcfg.loadFiles = jspmcfg.loadFiles || [];\r\n        jspmcfg.serveFiles = jspmcfg.serveFiles || [];\r\n\r\n        if (karmajspm.loadFiles) {\r\n            jspmcfg.loadFiles = jspmcfg.loadFiles.concat(_.isFunction(karmajspm.loadFiles) ? karmajspm.loadFiles(ctx) : karmajspm.loadFiles);\r\n        }\r\n        if (karmajspm.serveFiles) {\r\n            jspmcfg.serveFiles = jspmcfg.serveFiles.concat(_.isFunction(karmajspm.serveFiles) ? karmajspm.serveFiles(ctx) : karmajspm.serveFiles);\r\n        }\r\n\r\n        cfg.plugins = _.filter(cfg.plugins || [], it => it !== 'karma-jspm');\r\n        cfg.frameworks = _.filter(cfg.frameworks || [], it => it !== 'jspm');\r\n        // clean.\r\n\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.frameworks, it => 'karma-' + it.toLowerCase()));\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.reporters, it => {\r\n            let packname = 'karma-' + it.toLowerCase() + '-reporter'\r\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\r\n                return packname;\r\n            }\r\n            return 'karma-' + it;\r\n        }));\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.browsers, it => {\r\n            let packname = 'karma-' + it.toLowerCase() + '-launcher';\r\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\r\n                return packname;\r\n            }\r\n            return 'karma-' + it;\r\n        }));\r\n        cfg.plugins = _.uniq(cfg.plugins);\r\n\r\n\r\n\r\n        let initJspm: any = (files: (karma.FilePattern | string)[], basePath: string, jspm: KarmaJspm, client, emitter) => {\r\n            console.log('--------------------init karma jspm---------------------\\n', 'base path:', chalk.cyan(basePath));\r\n            jspm = jspm || {}\r\n\r\n            jspm = _.extend(jspm || {}, jspmcfg);\r\n\r\n            client.jspm = client.jspm || {};\r\n            if (jspm.paths !== undefined && typeof jspm.paths === 'object') {\r\n                client.jspm.paths = jspm.paths;\r\n            }\r\n            if (jspm.meta !== undefined && typeof jspm.meta === 'object') {\r\n                client.jspm.meta = jspm.meta;\r\n            }\r\n\r\n            // Pass on options to client\r\n            client.jspm.useBundles = jspm.useBundles;\r\n            client.jspm.stripExtension = jspm.stripExtension;\r\n\r\n            let baseURL = jspm.baseURL;\r\n            client.jspm.baseURL = baseURL || '';\r\n\r\n            console.log('base URL:', chalk.cyan(baseURL));\r\n            let fileBasePath = ctx.toUrl(resetBase ? ctx.getDist() : path.join(basePath, baseURL));\r\n            console.log('fileBasePath', fileBasePath);\r\n\r\n            let packagesPath = ctx.toUrl(jspm.packages);\r\n            let browserPath = ctx.toUrl(ctx.toRootPath(ctx.toStr(jspm.browser || '')));\r\n            let configPaths: string[] = Array.isArray(jspm.config) ? <string[]>jspm.config : [<string>jspm.config];\r\n            // Add SystemJS loader and jspm config\r\n\r\n\r\n            Array.prototype.unshift.apply(files,\r\n                configPaths.map((configPath) => {\r\n                    return createPattern(configPath)\r\n                })\r\n            );\r\n\r\n            // Needed for JSPM 0.17 beta\r\n            if (jspm.browser) {\r\n                files.unshift(createPattern(browserPath));\r\n            }\r\n\r\n            files.unshift(createPattern(adapterfile));\r\n            let sysjs = karmajspm.systemjs ? ctx.toSrc(karmajspm.systemjs) : ['system-polyfills.src', 'system.src'];\r\n            _.each(_.isArray(sysjs) ? sysjs : [sysjs], sf => {\r\n                files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, sf))));\r\n            });\r\n\r\n            function addExpandedFiles() {\r\n                client.jspm.expandedFiles = _.flatten(_.map(jspm.loadFiles, file => {\r\n                    let flname = path.join(fileBasePath, _.isString(file) ? file : file.pattern);\r\n                    files.push(createServedPattern(ctx.toUrl(flname), _.isString(file) ? null : file));\r\n                    return _.map(glob.sync(flname), (fm: string) => ctx.toUrl(fileBasePath, fm));\r\n                }));\r\n\r\n                console.log('expandedFiles:', client.jspm.expandedFiles);\r\n            }\r\n            addExpandedFiles();\r\n\r\n            emitter.on('file_list_modified', addExpandedFiles);\r\n\r\n            // Add served files to files array\r\n            _.each(jspm.serveFiles, file => {\r\n                files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern))));\r\n            });\r\n\r\n            // Allow Karma to serve all files within jspm_packages.\r\n            // This allows jspm/SystemJS to load them\r\n            var jspmPattern = createServedPattern(\r\n                ctx.toUrl(path.join(packagesPath, '!(system-polyfills.src.js|system.src.js)/**')), { nocache: jspm.cachePackages !== true }\r\n            );\r\n            jspmPattern.watched = false;\r\n            files.push(jspmPattern);\r\n\r\n            console.log('------------------------complete jspm pattern:\\n', files);\r\n        };\r\n        initJspm.$inject = ['config.files', 'config.basePath', 'config.jspm', 'config.client', 'emitter'];\r\n\r\n        cfg.frameworks.unshift('jspmdev');\r\n        cfg.plugins.unshift({\r\n            'framework:jspmdev': ['factory', initJspm]\r\n        });\r\n\r\n        return cfg;\r\n    }\r\n\r\n\r\n    getDefaultAdapter() {\r\n        return {\r\n            name: 'adapter',\r\n            template: `\r\n(function(karma, System) {\r\n    if (!System) {\r\n        throw new Error('SystemJS was not found. Please make sure you have ' +\r\n            'initialized jspm via installing a dependency with jspm, ' +\r\n            'or by running \"jspm dl-loader\".');\r\n    }\r\n\r\n\r\n    System.config({ baseURL: karma.config.jspm.baseURL?  'base/'+ karma.config.jspm.baseURL : 'base' });\r\n    \r\n\r\n    var stripExtension = typeof karma.config.jspm.stripExtension === 'boolean' ? karma.config.jspm.stripExtension : true;\r\n\r\n    // Prevent immediately starting tests.\r\n    karma.loaded = function() {\r\n\r\n        if (karma.config.jspm.paths !== undefined &&\r\n            typeof karma.config.jspm.paths === 'object') {\r\n\r\n            System.config({\r\n                paths: karma.config.jspm.paths\r\n            });\r\n        }\r\n\r\n        if (karma.config.jspm.meta !== undefined &&\r\n            typeof karma.config.jspm.meta === 'object') {\r\n            System.config({\r\n                meta: karma.config.jspm.meta\r\n            });\r\n        }\r\n\r\n        // Exclude bundle configurations if useBundles option is not specified\r\n        if (!karma.config.jspm.useBundles) {\r\n            System.bundles = [];\r\n        }\r\n\r\n        // Load everything specified in loadFiles in the specified order\r\n        var promiseChain = Promise.resolve();\r\n        for (var i = 0; i < karma.config.jspm.expandedFiles.length; i++) {\r\n            promiseChain = promiseChain.then((function(moduleName) {\r\n                return function() {\r\n                    return System['import'](moduleName);\r\n                };\r\n            })(extractModuleName(karma.config.jspm.expandedFiles[i])));\r\n        }\r\n\r\n        promiseChain.then(function() {\r\n            karma.start();\r\n        }, function(e) {\r\n            karma.error(e.name + ': ' + e.message);\r\n        });\r\n    };\r\n\r\n    function extractModuleName(fileName) {\r\n        if (stripExtension) {\r\n            return fileName.replace(/\\.js$/, '');\r\n        }\r\n        return fileName;\r\n    }\r\n})(window.__karma__, window.System);`\r\n        };\r\n    }\r\n\r\n\r\n    checkAdapter(karmajspm: KarmaJspmOption, ctx: ITaskContext): string {\r\n\r\n        let templ = karmajspm.karmaloader;\r\n        let defaultTempl = this.getDefaultAdapter();\r\n        if (!templ) {\r\n            templ = defaultTempl;\r\n        } else {\r\n            if (templ.name === defaultTempl.name) {\r\n                console.log(chalk.red('can not rewrite default adapter named: \"adapter\".'));\r\n                templ = defaultTempl;\r\n            }\r\n        }\r\n\r\n        let adapterfile = path.join(__dirname, './adapters', templ.name);\r\n        if (!/.js$/.test(adapterfile)) {\r\n            adapterfile = adapterfile + '.js';\r\n        }\r\n        mkdirp.sync(path.dirname(adapterfile));\r\n        if (!fs.existsSync(adapterfile)) {\r\n            fs.writeFileSync(adapterfile, templ.template, 'utf8')\r\n        }\r\n\r\n        return adapterfile;\r\n    }\r\n}\r\n\r\nfunction getPackageFilePath(packagesPath: string, fileName: string): string {\r\n    let fm = path.join(packagesPath, fileName + '@*.js');\r\n    var exists = glob.sync(fm);\r\n    if (exists && exists.length !== 0) {\r\n        return fm;\r\n    } else {\r\n        return path.join(packagesPath, fileName + '.js');\r\n    }\r\n}\r\n\r\nconst createPattern = function (path: string) {\r\n    return { pattern: path, included: true, served: true, watched: false };\r\n};\r\n\r\nconst createServedPattern = function (pathstr: string, file?) {\r\n    return {\r\n        pattern: pathstr,\r\n        included: file && 'included' in file ? file.included : false,\r\n        served: file && 'served' in file ? file.served : true,\r\n        nocache: file && 'nocache' in file ? file.nocache : false,\r\n        watched: file && 'watched' in file ? file.watched : true\r\n    };\r\n};\r\n"]}