{"version":3,"sources":["tasks/test.js"],"names":["getPackageFilePath","packagesPath","fileName","fm","path","join","exists","glob","sync","length","__decorate","decorators","target","key","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","chalk","require","development_core_1","karma","KarmaTest","info","_classCallCheck","this","fs","name","mkdirp","_this","tkn","ctx","subTaskName","getInfo","cfg","gulp","task","callback","karmaConfigFile","option","configFile","env","root","toRootPath","set","config","extend","singleRun","release","deploy","watch","basePath","toStr","getDist","files","code","console","log","red","cyan","bundleDest","dir","serve","each","sf","f","isDirectory","paths","pkg","karmajspm","readdirSync","jspm","adapterfile","jspmcfg","packages","toUrl","rootpath","directories","baseURL","cachePackages","relpkg","relative","resetBase","getRootPath","getRelativePaths","isFunction","isString","toDistPath","map","it","plugins","concat","frameworks","toLowerCase","test","reporters","devDependencies","packname","toSrc","dependencies","uniq","initJspm","client","emitter","loadFiles","file","flname","fileBasePath","pattern","meta","createServedPattern","expandedFiles","serveFiles","filter","undefined","stripExtension","browserPath","browser","configPaths","Array","isArray","configPath","addExpandedFiles","jspmPattern","nocache","push","$inject","createPattern","unshift","framework:jspmdev","defaultTempl","runWay","templ","included","existsSync","pathstr","watched","order","value","RunWay","parallel","oper","Operation","default","exports","served"],"mappings":"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","file":"../../tasks/test.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst chalk = require('chalk');\n// import * as path from 'path';\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst karma = require('karma');\nconst fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\nconst mkdirp = require('mkdirp');\nlet KarmaTest = class KarmaTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'web-test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option.karma;\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.configFile || path.join(ctx.env.root, './karma.conf.js');\n            karmaConfigFile = ctx.toRootPath(karmaConfigFile);\n            let cfg = {};\n            // get config.\n            require(karmaConfigFile)({\n                set(config) {\n                    cfg = _.extend(cfg, config);\n                }\n            });\n            if (option.config) {\n                cfg = option.config(ctx);\n            }\n            cfg = _.extend(cfg, { singleRun: ctx.env.release || ctx.env.deploy || ctx.env.watch !== true });\n            if (option.basePath) {\n                cfg.basePath = ctx.toStr(option.basePath);\n            }\n            else if (_.isUndefined(cfg.basePath)) {\n                cfg.basePath = ctx.getDist();\n            }\n            cfg.basePath = ctx.toRootPath(cfg.basePath);\n            if (option.jspm) {\n                cfg.files = cfg.files || [];\n                cfg = this.initkarmaJspmPlugin(cfg, ctx);\n            }\n            let serve = new karma.Server(cfg, (code) => {\n                if (code === 1) {\n                    console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(code));\n                    callback('Unit Test failures, exiting process');\n                }\n                else {\n                    console.log('Unit Tests passed', ', code:', chalk.cyan(code));\n                    callback();\n                }\n            });\n            serve.start();\n        });\n        return tkn;\n    }\n    getRelativePaths(ctx, rootpath) {\n        let paths = {};\n        let bundleDest = ctx.getDist();\n        let dir = fs.readdirSync(bundleDest);\n        _.each(dir, (d) => {\n            let sf = path.join(bundleDest, d);\n            let f = fs.lstatSync(sf);\n            if (f.isDirectory()) {\n                let p = d + '/**/*';\n                paths[p] = ctx.toUrl(rootpath, path.join(bundleDest, p));\n            }\n        });\n        // let jpk = <string>option.jspmPackages;\n        // let jp = path.basename(jpk) + '/*';\n        // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\n        console.log('paths: ', paths);\n        return paths;\n    }\n    initkarmaJspmPlugin(cfg, ctx) {\n        let option = ctx.option.karma;\n        let pkg = ctx.getPackage();\n        let karmajspm = _.isFunction(option.jspm) ? option.jspm(ctx) : option.jspm;\n        let jspmcfg = {};\n        let adapterfile = ctx.toUrl(this.checkAdapter(karmajspm, ctx));\n        if (karmajspm.packages) {\n            jspmcfg.packages = ctx.toRootPath(ctx.toStr(karmajspm.packages));\n        }\n        if (!jspmcfg.packages && pkg.jspm && pkg.jspm.directories) {\n            jspmcfg.packages = ctx.toRootPath(pkg.jspm.directories.packages);\n        }\n        jspmcfg.baseURL = ctx.toStr(karmajspm.baseURL || '');\n        jspmcfg.cachePackages = karmajspm.cachePackages;\n        let relpkg = path.relative(cfg.basePath, jspmcfg.packages);\n        let resetBase = false;\n        if (/^\\.\\./.test(relpkg)) {\n            resetBase = true;\n            cfg.basePath = ctx.getRootPath();\n            jspmcfg.paths = this.getRelativePaths(ctx, cfg.basePath);\n            console.log('reset paths:', jspmcfg.paths);\n        }\n        if (karmajspm.config) {\n            jspmcfg.config = ctx.toSrc(karmajspm.config);\n            jspmcfg.config = _.isString(jspmcfg.config) ? ctx.toDistPath(jspmcfg.config) : _.map(jspmcfg.config, it => ctx.toDistPath(it));\n        }\n        if (!jspmcfg.config && pkg.jspm) {\n            jspmcfg.config = ctx.toRootPath(pkg.jspm.configFile);\n        }\n        if (jspmcfg.config) {\n            jspmcfg.config = _.isString(jspmcfg.config) ? ctx.toUrl(jspmcfg.config) : _.map(jspmcfg.config, it => ctx.toUrl(it));\n        }\n        cfg.plugins = _.filter(cfg.plugins || [], it => it !== 'karma-jspm');\n        cfg.frameworks = _.filter(cfg.frameworks || [], it => it !== 'jspm');\n        // clean.\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.frameworks, it => 'karma-' + it.toLowerCase()));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.reporters, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-reporter';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.browsers, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-launcher';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = _.uniq(cfg.plugins);\n        let initJspm = (files, basePath, jspm, client, emitter) => {\n            console.log('--------------------init karma jspm---------------------\\n', 'base path:', chalk.cyan(basePath));\n            jspm = jspm || {};\n            let loadFiles = jspm.loadFiles || [];\n            let serveFiles = jspm.serveFiles || [];\n            jspm = _.extend(jspm || {}, jspmcfg);\n            jspm.loadFiles = _.uniq(jspm.loadFiles.concat(loadFiles));\n            jspm.serveFiles = _.uniq(jspm.serveFiles.concat(serveFiles));\n            client.jspm = client.jspm || {};\n            if (jspm.paths !== undefined && typeof jspm.paths === 'object') {\n                client.jspm.paths = jspm.paths;\n            }\n            if (jspm.meta !== undefined && typeof jspm.meta === 'object') {\n                client.jspm.meta = jspm.meta;\n            }\n            // Pass on options to client\n            client.jspm.useBundles = jspm.useBundles;\n            client.jspm.stripExtension = jspm.stripExtension;\n            let baseURL = jspm.baseURL;\n            client.jspm.baseURL = baseURL || '';\n            console.log('base URL:', chalk.cyan(baseURL));\n            let fileBasePath = ctx.toUrl(path.join(resetBase ? ctx.getDist() : basePath, baseURL));\n            console.log('fileBasePath', fileBasePath);\n            client.jspm.paths = jspm.paths || {};\n            // client.jspm.paths[path.basename(jspm.packages)] = path.relative(jspm.packages, basePath);\n            let packagesPath = ctx.toUrl(jspm.packages);\n            let browserPath = ctx.toUrl(ctx.toRootPath(ctx.toStr(jspm.browser || '')));\n            let configPaths = Array.isArray(jspm.config) ? jspm.config : [jspm.config];\n            // Add SystemJS loader and jspm config\n            Array.prototype.unshift.apply(files, configPaths.map((configPath) => {\n                return createPattern(configPath);\n            }));\n            // Needed for JSPM 0.17 beta\n            if (jspm.browser) {\n                files.unshift(createPattern(browserPath));\n            }\n            files.unshift(createPattern(adapterfile));\n            files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, 'system-polyfills.src'))));\n            files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, 'system.src'))));\n            function addExpandedFiles() {\n                client.jspm.expandedFiles = _.flatten(_.map(jspm.loadFiles, file => {\n                    let flname = path.join(fileBasePath, _.isString(file) ? file : file.pattern);\n                    files.push(createServedPattern(ctx.toUrl(flname), _.isString(file) ? null : file));\n                    return _.map(glob.sync(flname), (fm) => ctx.toUrl(fileBasePath, fm));\n                }));\n                console.log('expandedFiles:', client.jspm.expandedFiles);\n            }\n            addExpandedFiles();\n            emitter.on('file_list_modified', addExpandedFiles);\n            // Add served files to files array\n            _.each(jspm.serveFiles, file => {\n                files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern))));\n            });\n            // Allow Karma to serve all files within jspm_packages.\n            // This allows jspm/SystemJS to load them\n            var jspmPattern = createServedPattern(ctx.toUrl(path.join(packagesPath + '!(system-polyfills.src.js|system.src.js)/**')), { nocache: jspm.cachePackages !== true });\n            jspmPattern.watched = false;\n            files.push(jspmPattern);\n            console.log('------------------------complete jspm pattern:\\n', files);\n        };\n        initJspm.$inject = ['config.files', 'config.basePath', 'config.jspm', 'config.client', 'emitter'];\n        cfg.frameworks.unshift('jspmdev');\n        cfg.plugins.unshift({\n            'framework:jspmdev': ['factory', initJspm]\n        });\n        return cfg;\n    }\n    getDefaultAdapter() {\n        return {\n            name: 'adapter',\n            template: `\r\n(function(karma, System) {\r\n    if (!System) {\r\n        throw new Error('SystemJS was not found. Please make sure you have ' +\r\n            'initialized jspm via installing a dependency with jspm, ' +\r\n            'or by running \"jspm dl-loader\".');\r\n    }\r\n\r\n\r\n    System.config({ baseURL: karma.config.jspm.baseURL?  'base/'+karma.config.jspm.baseURL : 'base' });\r\n    \r\n\r\n    var stripExtension = typeof karma.config.jspm.stripExtension === 'boolean' ? karma.config.jspm.stripExtension : true;\r\n\r\n    // Prevent immediately starting tests.\r\n    karma.loaded = function() {\r\n\r\n        if (karma.config.jspm.paths !== undefined &&\r\n            typeof karma.config.jspm.paths === 'object') {\r\n\r\n            System.config({\r\n                paths: karma.config.jspm.paths\r\n            });\r\n        }\r\n\r\n        if (karma.config.jspm.meta !== undefined &&\r\n            typeof karma.config.jspm.meta === 'object') {\r\n            System.config({\r\n                meta: karma.config.jspm.meta\r\n            });\r\n        }\r\n\r\n        // Exclude bundle configurations if useBundles option is not specified\r\n        if (!karma.config.jspm.useBundles) {\r\n            System.bundles = [];\r\n        }\r\n\r\n        // Load everything specified in loadFiles in the specified order\r\n        var promiseChain = Promise.resolve();\r\n        for (var i = 0; i < karma.config.jspm.expandedFiles.length; i++) {\r\n            promiseChain = promiseChain.then((function(moduleName) {\r\n                return function() {\r\n                    return System['import'](moduleName);\r\n                };\r\n            })(extractModuleName(karma.config.jspm.expandedFiles[i])));\r\n        }\r\n\r\n        promiseChain.then(function() {\r\n            karma.start();\r\n        }, function(e) {\r\n            karma.error(e.name + ': ' + e.message);\r\n        });\r\n    };\r\n\r\n    function extractModuleName(fileName) {\r\n        if (stripExtension) {\r\n            return fileName.replace(/\\.js$/, '');\r\n        }\r\n        return fileName;\r\n    }\r\n})(window.__karma__, window.System);`\n        };\n    }\n    checkAdapter(karmajspm, ctx) {\n        let templ = karmajspm.karmaloader;\n        let defaultTempl = this.getDefaultAdapter();\n        if (!templ) {\n            templ = defaultTempl;\n        }\n        else {\n            if (templ.name === defaultTempl.name) {\n                console.log(chalk.red('can not rewrite default adapter named: \"adapter\".'));\n                templ = defaultTempl;\n            }\n        }\n        let adapterfile = path.join(__dirname, './adapters', templ.name);\n        if (!/.js$/.test(adapterfile)) {\n            adapterfile = adapterfile + '.js';\n        }\n        mkdirp.sync(path.dirname(adapterfile));\n        if (!fs.existsSync(adapterfile)) {\n            fs.writeFileSync(adapterfile, templ.template, 'utf8');\n        }\n        return adapterfile;\n    }\n};\nKarmaTest = __decorate([\n    development_core_1.task({\n        order: { value: 0.25, runWay: development_core_1.RunWay.parallel },\n        oper: development_core_1.Operation.default | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], KarmaTest);\nexports.KarmaTest = KarmaTest;\nfunction getPackageFilePath(packagesPath, fileName) {\n    let fm = path.join(packagesPath, fileName + '@*.js');\n    var exists = glob.sync(fm);\n    if (exists && exists.length !== 0) {\n        return fm;\n    }\n    else {\n        return path.join(packagesPath, fileName + '.js');\n    }\n}\nconst createPattern = function (path) {\n    return { pattern: path, included: true, served: true, watched: false };\n};\nconst createServedPattern = function (pathstr, file) {\n    return {\n        pattern: pathstr,\n        included: file && 'included' in file ? file.included : false,\n        served: file && 'served' in file ? file.served : true,\n        nocache: file && 'nocache' in file ? file.nocache : false,\n        watched: file && 'watched' in file ? file.watched : true\n    };\n};\n"]}