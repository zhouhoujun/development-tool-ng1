{"version":3,"sources":["tasks/test.js"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","chalk","require","development_core_1","karam","KaramTest","info","_classCallCheck","this","_createClass","value","name","path","tkn","ctx","subTaskName","getInfo","gulp","task","callback","karmaConfigFile","option","join","env","root","cfg","karmaConfig","karamjspm","files","frameworks","extend","release","deploy","watch","basePath","getDist","serve","code","console","log","red","cyan","start","oper","Operation","default","test","exports","pattern","included","served","watched","createServedPattern","file","nocache","order"],"mappings":"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","file":"../../tasks/test.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst chalk = require('chalk');\n// import * as path from 'path';\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst karam = require('karma');\nconst path = require('path');\nlet KaramTest = class KaramTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'web-test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.karmaConfigFile || path.join(ctx.env.root, './karma.conf.js');\n            if (!path.isAbsolute(karmaConfigFile)) {\n                karmaConfigFile = path.join(ctx.env.root, karmaConfigFile);\n            }\n            let cfg = null;\n            if (option.karmaConfig) {\n                cfg = option.karmaConfig(ctx);\n            }\n            if (option.karamjspm) {\n                cfg.files = cfg.files || [];\n                cfg.frameworks;\n            }\n            cfg = _.extend(cfg || { singleRun: ctx.env.release || ctx.env.deploy || ctx.env.watch !== true }, {\n                configFile: karmaConfigFile\n            });\n            if (option.karmaBasePath) {\n                cfg.basePath = ctx.toStr(option.karmaBasePath);\n            }\n            else if (_.isUndefined(cfg.basePath)) {\n                cfg.basePath = ctx.getDist();\n            }\n            let serve = new karam.Server(cfg, (code) => {\n                if (code === 1) {\n                    console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(code));\n                    callback('Unit Test failures, exiting process');\n                }\n                else {\n                    console.log('Unit Tests passed', ', code:', chalk.cyan(code));\n                    callback();\n                }\n            });\n            if (option.karamjspm) {\n                serve.on('file_list_modified', () => {\n                });\n            }\n            serve.start();\n        });\n        return tkn;\n    }\n};\nKaramTest = __decorate([\n    development_core_1.task({\n        order: { value: 0.25, runWay: development_core_1.RunWay.parallel },\n        oper: development_core_1.Operation.default | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], KaramTest);\nexports.KaramTest = KaramTest;\nconst createPattern = function (path) {\n    return { pattern: path, included: true, served: true, watched: false };\n};\nconst createServedPattern = function (path, file) {\n    return {\n        pattern: path,\n        included: file && 'included' in file ? file.included : false,\n        served: file && 'served' in file ? file.served : true,\n        nocache: file && 'nocache' in file ? file.nocache : false,\n        watched: file && 'watched' in file ? file.watched : true\n    };\n};\n"]}