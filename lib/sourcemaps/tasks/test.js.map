{"version":3,"sources":["tasks/test.ts"],"names":[],"mappings":"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","file":"../../tasks/test.js","sourcesContent":["import * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\nimport { TaskCallback, Gulp } from 'gulp';\r\n// import * as path from 'path';\r\nimport { Src, ITask, ITaskInfo, Operation, task, ITaskContext } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nimport * as karma from 'karma';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nconst glob = require('glob');\r\nconst mkdirp = require('mkdirp');\r\nimport * as url from 'url';\r\nimport { IWebTaskOption, KarmaSystemjsOption, KarmaSystemjs } from '../WebTaskOption';\r\n\r\n@task({\r\n    // order: total => { return { value: 2 / total, runWay: RunWay.parallel } },\r\n    oper: Operation.default | Operation.test\r\n})\r\nexport class KarmaTest implements ITask {\r\n    constructor(private info: ITaskInfo) {\r\n    }\r\n    getInfo() {\r\n        this.info.name = this.info.name || 'karma';\r\n        return this.info;\r\n    }\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        let option = (<IWebTaskOption>ctx.option).karma || {};\r\n        // console.log('web test:----------------------\\n', ctx.getRootPath());\r\n        let tkn = ctx.subTaskName(this.getInfo());\r\n        gulp.task(tkn, (callback: TaskCallback) => {\r\n            let karmaConfigFile = option.configFile || path.join(ctx.getRootPath(), './karma.conf.js');\r\n            karmaConfigFile = ctx.toRootPath(karmaConfigFile);\r\n            let cfg: karma.ConfigOptions = {};\r\n            // get config.\r\n            require(karmaConfigFile)({\r\n                set(config) {\r\n                    cfg = _.extend(cfg, config);\r\n                }\r\n            });\r\n            if (option.config) {\r\n                cfg = option.config(ctx);\r\n            }\r\n\r\n            cfg = <karma.ConfigOptions>_.extend(cfg, { singleRun: ((ctx.oper & Operation.release) > 0) || ((ctx.oper & Operation.watch) === 0) });\r\n            if (option.basePath) {\r\n                cfg.basePath = ctx.toStr(option.basePath);\r\n            } else if (_.isUndefined(cfg.basePath)) {\r\n                cfg.basePath = ctx.getDist();\r\n            }\r\n\r\n            cfg.basePath = ctx.toRootPath(cfg.basePath);\r\n\r\n            if (!option.systemjs && option['jspm']) {\r\n                option.systemjs = option['jspm']\r\n            }\r\n            // console.log('before init option:----------------------------\\n', ctx.option);\r\n            if (option.systemjs) {\r\n                cfg.files = cfg.files || [];\r\n                cfg = this.initkarmaSystemjsPlugin(cfg, ctx);\r\n            }\r\n\r\n            // console.log('cfg:----------------------------\\n', cfg);\r\n\r\n            let serve = new karma.Server(\r\n                cfg,\r\n                (code: number) => {\r\n                    if (code === 1) {\r\n                        console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(<any>code));\r\n                        callback(<any>'Unit Test failures, exiting process');\r\n                    } else {\r\n                        console.log('Unit Tests passed', ', code:', chalk.cyan(<any>code));\r\n                        callback();\r\n                    }\r\n                });\r\n\r\n            serve.start();\r\n        });\r\n\r\n        return tkn;\r\n    }\r\n\r\n    getRelativePaths(ctx: ITaskContext, rootpath: string, prefix = '') {\r\n        let paths: any = {};\r\n        let bundleDest = ctx.getDist();\r\n        let dir = fs.readdirSync(bundleDest);\r\n        _.each(dir, (d: string) => {\r\n\r\n            let sf = path.join(bundleDest, d);\r\n            let f = fs.lstatSync(sf);\r\n            if (f.isDirectory()) {\r\n                let p = '/' + d + '/*';\r\n                paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\r\n            }\r\n        });\r\n        let p = '*'\r\n        paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\r\n        // let jpk = <string>option.systemjsPackages;\r\n        // let jp = path.basename(jpk) + '/*';\r\n        // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\r\n\r\n        return paths;\r\n    }\r\n\r\n\r\n    initkarmaSystemjsPlugin(cfg: karma.ConfigOptions, ctx: ITaskContext): karma.ConfigOptions {\r\n        let option = (<IWebTaskOption>ctx.option).karma || {};\r\n        let pkg = ctx.getPackage();\r\n\r\n        let karmaSystemjs: KarmaSystemjsOption;\r\n        if (_.isFunction(option.systemjs)) {\r\n            karmaSystemjs = option.systemjs(ctx);\r\n        } else if (_.isBoolean(karma)) {\r\n            karmaSystemjs = {};\r\n        } else {\r\n            karmaSystemjs = option.systemjs as KarmaSystemjsOption;\r\n        }\r\n        let syscfg: KarmaSystemjs = cfg['systemjs'] || cfg['jspm'] || {};\r\n\r\n        let adapterfile = ctx.toUrl(this.checkAdapter(karmaSystemjs, ctx));\r\n\r\n        if (karmaSystemjs.packages) {\r\n            syscfg.packages = ctx.toRootPath(ctx.toStr(karmaSystemjs.packages));\r\n        } else {\r\n            if (!syscfg.packages && pkg.systemjs && pkg.systemjs.directories) {\r\n                syscfg.packages = ctx.toRootPath(pkg.systemjs.directories.packages);\r\n            } else if (syscfg.packages) {\r\n                syscfg.packages = ctx.toRootPath(syscfg.packages);\r\n            }\r\n        }\r\n        if (karmaSystemjs.config) {\r\n            syscfg.config = ctx.toDistSrc(ctx.toSrc(karmaSystemjs.config));\r\n        } else {\r\n            if (!syscfg.config && pkg.systemjs) {\r\n                syscfg.config = ctx.toRootPath(pkg.systemjs.configFile);\r\n            } else if (syscfg.config) {\r\n                syscfg.config = ctx.toDistSrc(syscfg.config);\r\n            }\r\n        }\r\n\r\n        syscfg.config = _.isString(syscfg.config) ? ctx.toUrl(syscfg.config) : _.map(syscfg.config, it => ctx.toUrl(it));\r\n\r\n        syscfg.baseURL = ctx.toStr(karmaSystemjs.baseURL || syscfg.baseURL || '');\r\n        if (!_.isUndefined(karmaSystemjs.cachePackages)) {\r\n            syscfg.cachePackages = karmaSystemjs.cachePackages;\r\n        }\r\n\r\n        console.log('packages:------------------------\\n', syscfg.packages);\r\n\r\n        let relpkg = ctx.toUrl(cfg.basePath, syscfg.packages);\r\n        let resetBase = false;\r\n        if (/^\\.\\./.test(relpkg)) {\r\n            resetBase = true;\r\n            let root = cfg.basePath = ctx.getRootPath();\r\n            syscfg.paths = this.getRelativePaths(ctx, cfg.basePath); // , 'base/');\r\n            let rlpk = ctx.toUrl(root, syscfg.packages) + '/*';\r\n            let systempk = path.basename(syscfg.packages) + '/*';\r\n            syscfg.paths['/' + systempk] = 'base/' + rlpk;\r\n\r\n\r\n            let res: Src = ctx.to(karmaSystemjs.resource) || ['public', 'asserts'];\r\n            let relpth = ctx.toUrl(root, ctx.getDist());\r\n            cfg.proxies = cfg.proxies || {};\r\n            cfg.files = cfg.files || [];\r\n            _.each(_.isString(res) ? [res] : res, r => {\r\n                cfg.files.push({ pattern: ctx.toUrl(root, ctx.toDistPath(r)) + '/**', included: false });\r\n\r\n                let abr = /^\\//.test(r) ? ('base' + r) : ('base/' + r);\r\n                cfg.proxies[abr] = url.resolve(relpth, r);\r\n            });\r\n\r\n            console.log('paths: ', syscfg.paths);\r\n\r\n            cfg.proxies = _.extend(cfg.proxies, syscfg.paths);\r\n            cfg.proxies[path.basename(syscfg.packages)] = ctx.toUrl(root, syscfg.packages);\r\n            console.log('proxies: ', cfg.proxies);\r\n        }\r\n\r\n        syscfg.loadFiles = syscfg.loadFiles || [];\r\n        syscfg.serveFiles = syscfg.serveFiles || [];\r\n\r\n        if (karmaSystemjs.loadFiles) {\r\n            syscfg.loadFiles = syscfg.loadFiles.concat(_.isFunction(karmaSystemjs.loadFiles) ? karmaSystemjs.loadFiles(ctx) : karmaSystemjs.loadFiles);\r\n        }\r\n        if (karmaSystemjs.serveFiles) {\r\n            syscfg.serveFiles = syscfg.serveFiles.concat(_.isFunction(karmaSystemjs.serveFiles) ? karmaSystemjs.serveFiles(ctx) : karmaSystemjs.serveFiles);\r\n        }\r\n\r\n        cfg.plugins = _.filter(cfg.plugins || [], it => it !== 'karma-systemjs');\r\n        cfg.frameworks = _.filter(cfg.frameworks || [], it => it !== 'systemjs');\r\n        // clean.\r\n\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.frameworks, it => 'karma-' + it.toLowerCase()));\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.reporters, it => {\r\n            let packname = 'karma-' + it.toLowerCase() + '-reporter'\r\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\r\n                return packname;\r\n            }\r\n            return 'karma-' + it;\r\n        }));\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.browsers, it => {\r\n            let packname = 'karma-' + it.toLowerCase() + '-launcher';\r\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\r\n                return packname;\r\n            }\r\n            return 'karma-' + it;\r\n        }));\r\n        cfg.plugins = _.uniq(cfg.plugins);\r\n\r\n\r\n\r\n        let initSystemjs: any = (files: (karma.FilePattern | string)[], basePath: string, systemjs: KarmaSystemjs, client, emitter) => {\r\n            console.log('--------------------init karma systemjs---------------------\\n', 'base path:', chalk.cyan(basePath));\r\n            systemjs = systemjs || {}\r\n\r\n            systemjs = _.extend(systemjs || {}, syscfg);\r\n\r\n            client.systemjs = client.systemjs || {};\r\n            if (systemjs.paths !== undefined && typeof systemjs.paths === 'object') {\r\n                client.systemjs.paths = systemjs.paths;\r\n            }\r\n            if (systemjs.meta !== undefined && typeof systemjs.meta === 'object') {\r\n                client.systemjs.meta = systemjs.meta;\r\n            }\r\n            // Pass on options to client\r\n            client.systemjs.useBundles = systemjs.useBundles;\r\n            client.systemjs.stripExtension = systemjs.stripExtension;\r\n\r\n            let baseURL = systemjs.baseURL;\r\n            client.systemjs.baseURL = baseURL || '';\r\n\r\n            console.log('base URL:', chalk.cyan(baseURL));\r\n            let fileBasePath = ctx.toUrl(resetBase ? ctx.getDist() : path.join(basePath, baseURL));\r\n            console.log('fileBasePath', fileBasePath);\r\n\r\n            let packagesPath = ctx.toUrl(systemjs.packages);\r\n            let browserPath = ctx.toUrl(ctx.toRootPath(ctx.toStr(systemjs.browser || '')));\r\n            let configPaths: string[] = Array.isArray(systemjs.config) ? <string[]>systemjs.config : [<string>systemjs.config];\r\n            // Add SystemJS loader and systemjs config\r\n\r\n\r\n            Array.prototype.unshift.apply(files,\r\n                configPaths.map((configPath) => {\r\n                    return createPattern(configPath)\r\n                })\r\n            );\r\n\r\n            // Needed for JSPM 0.17 beta\r\n            if (systemjs.browser) {\r\n                files.unshift(createPattern(browserPath));\r\n            }\r\n\r\n            files.unshift(createPattern(adapterfile));\r\n            let sysjs = karmaSystemjs.systemjs ? ctx.toSrc(karmaSystemjs.systemjs) : ['system-polyfills', 'system'];\r\n            _.each(_.isArray(sysjs) ? sysjs : [sysjs], sf => {\r\n                files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, sf))));\r\n            });\r\n\r\n            function addExpandedFiles() {\r\n                client.systemjs.expandedFiles = _.flatten(_.map(systemjs.loadFiles, file => {\r\n                    let flname = path.join(fileBasePath, _.isString(file) ? file : file.pattern);\r\n                    files.push(createServedPattern(ctx.toUrl(flname), _.isString(file) ? null : file));\r\n                    return _.map(glob.sync(flname), (fm: string) => ctx.toUrl(fileBasePath, fm));\r\n                }));\r\n\r\n                console.log('expandedFiles:', client.systemjs.expandedFiles);\r\n            }\r\n            addExpandedFiles();\r\n\r\n            emitter.on('file_list_modified', addExpandedFiles);\r\n\r\n            // Add served files to files array\r\n            _.each(systemjs.serveFiles, file => {\r\n                files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern))));\r\n            });\r\n\r\n            // Allow Karma to serve all files within systemjs_packages.\r\n            // This allows systemjs/SystemJS to load them\r\n            var systemjsPattern = createServedPattern(\r\n                ctx.toUrl(path.join(packagesPath, '!(system-polyfills.js|system.js|system-polyfills.src.js|system.src.js)/**')), { nocache: systemjs.cachePackages !== true }\r\n            );\r\n            systemjsPattern.watched = false;\r\n            files.push(systemjsPattern);\r\n\r\n            console.log('------------------------complete systemjs pattern:\\n', files);\r\n        };\r\n        initSystemjs.$inject = ['config.files', 'config.basePath', 'config.systemjs', 'config.client', 'emitter'];\r\n\r\n        cfg.frameworks.unshift('systemjsdev');\r\n        cfg.plugins.unshift({\r\n            'framework:systemjsdev': ['factory', initSystemjs]\r\n        });\r\n\r\n        return cfg;\r\n    }\r\n\r\n\r\n    getDefaultAdapter() {\r\n        return {\r\n            name: 'adapter',\r\n            template: `\r\n(function(karma, System) {\r\n    if (!System) {\r\n        throw new Error('SystemJS was not found. Please make sure you have ' +\r\n            'initialized systemjs via installing a dependency with systemjs, ' +\r\n            'or by running \"systemjs dl-loader\".');\r\n    }\r\n\r\n\r\n    System.config({ baseURL: karma.config.systemjs.baseURL?  'base/'+ karma.config.systemjs.baseURL : 'base' });\r\n    \r\n\r\n    var stripExtension = typeof karma.config.systemjs.stripExtension === 'boolean' ? karma.config.systemjs.stripExtension : true;\r\n\r\n    // Prevent immediately starting tests.\r\n    karma.loaded  = function() {\r\n\r\n        if (karma.config.systemjs.paths !== undefined &&\r\n            typeof karma.config.systemjs.paths === 'object') {\r\n\r\n            System.config({\r\n                paths: karma.config.systemjs.paths\r\n            });\r\n        }\r\n\r\n        if (karma.config.systemjs.meta !== undefined &&\r\n            typeof karma.config.systemjs.meta === 'object') {\r\n            System.config({\r\n                meta: karma.config.systemjs.meta\r\n            });\r\n        }\r\n\r\n        // Exclude bundle configurations if useBundles option is not specified\r\n        if (!karma.config.systemjs.useBundles) {\r\n            System.bundles = [];\r\n        }\r\n\r\n        // Load everything specified in loadFiles in the specified order\r\n        var promiseChain = Promise.resolve();\r\n        for (var i = 0; i < karma.config.systemjs.expandedFiles.length; i++) {\r\n            promiseChain = promiseChain.then((function(moduleName) {\r\n                return function() {\r\n                    return System['import'](moduleName);\r\n                };\r\n            })(extractModuleName(karma.config.systemjs.expandedFiles[i])));\r\n        }\r\n\r\n        promiseChain.then(function() {\r\n            karma.start();\r\n        }, function(e) {\r\n            karma.error(e.name + ': ' + e.message);\r\n        });\r\n    };\r\n\r\n    function extractModuleName(fileName) {\r\n        if (stripExtension) {\r\n            return fileName.replace(/\\.js$/, '');\r\n        }\r\n        return fileName;\r\n    }\r\n})(window.__karma__, window.System);`\r\n        };\r\n    }\r\n\r\n\r\n    checkAdapter(sysKarma: KarmaSystemjsOption, ctx: ITaskContext): string {\r\n\r\n        let templ = sysKarma.karmaloader;\r\n        let defaultTempl = this.getDefaultAdapter();\r\n        if (!templ) {\r\n            templ = defaultTempl;\r\n        } else {\r\n            if (templ.name === defaultTempl.name) {\r\n                console.log(chalk.red('can not rewrite default adapter named: \"adapter\".'));\r\n                templ = defaultTempl;\r\n            }\r\n        }\r\n\r\n        let adapterfile = path.join(__dirname, './adapters', templ.name);\r\n        if (!/.js$/.test(adapterfile)) {\r\n            adapterfile = adapterfile + '.js';\r\n        }\r\n        mkdirp.sync(path.dirname(adapterfile));\r\n        if (!fs.existsSync(adapterfile)) {\r\n            fs.writeFileSync(adapterfile, templ.template); // { encoding: 'utf8'})\r\n        }\r\n\r\n        return adapterfile;\r\n    }\r\n}\r\n\r\nfunction getPackageFilePath(packagesPath: string, fileName: string): string {\r\n    let fm = path.join(packagesPath, fileName + '@*.js');\r\n    var exists = glob.sync(fm);\r\n    if (exists && exists.length !== 0) {\r\n        return fm;\r\n    } else {\r\n        return path.join(packagesPath, fileName + '.js');\r\n    }\r\n}\r\n\r\nconst createPattern = function (path: string) {\r\n    return { pattern: path, included: true, served: true, watched: false };\r\n};\r\n\r\nconst createServedPattern = function (pathstr: string, file?) {\r\n    return {\r\n        pattern: pathstr,\r\n        included: file && 'included' in file ? file.included : false,\r\n        served: file && 'served' in file ? file.served : true,\r\n        nocache: file && 'nocache' in file ? file.nocache : false,\r\n        watched: file && 'watched' in file ? file.watched : true\r\n    };\r\n};\r\n"]}