{"version":3,"sources":["tasks/test.js","tasks/test.ts"],"names":["expandGlob","file","cwd","glob","sync","pattern","getPackageFilePath","packagesPath","fileName","fm","path","join","exists","length","__decorate","decorators","target","key","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","require","chalk","development_core_1","karma","fs","mkdirp","KarmaTest","info","_classCallCheck","this","_createClass","value","name","ctx","gulp","_this","option","tkn","subTaskName","getInfo","task","callback","karmaConfigFile","env","root","toRootPath","cfg","karmaConfig","extend","singleRun","release","deploy","watch","configFile","karmaBasePath","basePath","toStr","isUndefined","getDist","karmaJspm","files","set","config","initkarmaJspmPlugin","serve","Server","code","console","log","red","cyan","on","start","pkg","getPackage","karmajspm","isFunction","adapterfile","toUrl","checkAdapter","initJspm","jspm","client","emitter","addExpandedFiles","expandedFiles","flatten","map","loadFiles","push","createServedPattern","fileBasePath","isString","dist","toDistPath","relative","toSrc","it","serveFiles","concat","packages","directories","cachePackages","undefined","paths","meta","useBundles","stripExtension","baseURL","browserPath","browser","configPaths","Array","isArray","prototype","unshift","apply","configPath","createPattern","each","jspmPattern","nocache","watched","$inject","plugins","frameworks","toLowerCase","reporters","packname","dependencies","devDependencies","browsers","uniq","indexOf","splice","framework:jspm","template","templ","karmaloader","defaultTempl","getDefaultAdapter","__dirname","test","dirname","existsSync","writeFileSync","order","runWay","RunWay","parallel","oper","Operation","default","exports","included","served","pathstr"],"mappings":"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","file":"../../tasks/test.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst chalk = require('chalk');\n// import * as path from 'path';\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst karma = require('karma');\nconst fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\nconst mkdirp = require('mkdirp');\nlet KarmaTest = class KarmaTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'web-test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.karmaConfigFile || path.join(ctx.env.root, './karma.conf.js');\n            karmaConfigFile = ctx.toRootPath(karmaConfigFile);\n            let cfg = null;\n            if (option.karmaConfig) {\n                cfg = option.karmaConfig(ctx);\n            }\n            cfg = _.extend(cfg || { singleRun: ctx.env.release || ctx.env.deploy || ctx.env.watch !== true }, {\n                configFile: karmaConfigFile\n            });\n            if (option.karmaBasePath) {\n                cfg.basePath = ctx.toStr(option.karmaBasePath);\n            }\n            else if (_.isUndefined(cfg.basePath)) {\n                cfg.basePath = ctx.getDist();\n            }\n            cfg.basePath = ctx.toRootPath(cfg.basePath);\n            if (option.karmaJspm) {\n                cfg.files = cfg.files || [];\n                require(karmaConfigFile)({\n                    set(config) {\n                        cfg = _.extend(cfg, config);\n                    }\n                });\n                cfg = this.initkarmaJspmPlugin(cfg, ctx);\n            }\n            let serve = new karma.Server(cfg, (code) => {\n                if (code === 1) {\n                    console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(code));\n                    callback('Unit Test failures, exiting process');\n                }\n                else {\n                    console.log('Unit Tests passed', ', code:', chalk.cyan(code));\n                    callback();\n                }\n            });\n            if (option.karmaJspm) {\n                serve.on('file_list_modified', () => {\n                });\n            }\n            serve.start();\n        });\n        return tkn;\n    }\n    initkarmaJspmPlugin(cfg, ctx) {\n        let option = ctx.option;\n        let pkg = ctx.getPackage();\n        let karmajspm = _.isFunction(option.karmaJspm) ? option.karmaJspm(ctx) : option.karmaJspm;\n        let adapterfile = ctx.toUrl(this.checkAdapter(karmajspm, ctx));\n        let initJspm = (files, basePath, jspm, client, emitter) => {\n            let dist = ctx.getDist();\n            basePath = ctx.toDistPath(path.relative(dist, basePath));\n            console.log('--------------------init karma jspm---------------------\\n', 'base path:', chalk.cyan(basePath));\n            jspm = jspm || {};\n            if (karmajspm.config) {\n                jspm.config = ctx.toSrc(karmajspm.config);\n            }\n            if (!jspm.config && pkg.jspm) {\n                jspm.config = ctx.toRootPath(pkg.jspm.configFile);\n            }\n            else {\n                jspm.config = _.isString(jspm.config) ? path.join(basePath, jspm.config) : _.map(jspm.config, it => path.join(it, it));\n            }\n            jspm.config = _.isString(jspm.config) ? ctx.toUrl(jspm.config) : _.map(jspm.config, it => ctx.toUrl(it));\n            jspm.loadFiles = jspm.loadFiles || [];\n            jspm.serveFiles = jspm.serveFiles || [];\n            if (karmajspm.loadFiles) {\n                jspm.loadFiles.concat(_.isFunction(karmajspm.loadFiles) ? karmajspm.loadFiles(ctx) : karmajspm.loadFiles);\n            }\n            if (karmajspm.serveFiles) {\n                jspm.serveFiles.concat(_.isFunction(karmajspm.serveFiles) ? karmajspm.serveFiles(ctx) : karmajspm.serveFiles);\n            }\n            if (karmajspm.packages) {\n                jspm.packages = ctx.toStr(jspm.packages || karmajspm.packages);\n            }\n            if (!jspm.packages && pkg.jspm && pkg.jspm.directories) {\n                jspm.packages = ctx.toRootPath(pkg.jspm.directories.packages);\n            }\n            else {\n                jspm.packages = path.join(basePath, jspm.packages);\n            }\n            jspm.cachePackages = _.isUndefined(karmajspm.cachePackages) ? jspm.cachePackages : jspm.cachePackages;\n            client.jspm = client.jspm || {};\n            if (jspm.paths !== undefined && typeof jspm.paths === 'object') {\n                client.jspm.paths = jspm.paths;\n            }\n            if (jspm.meta !== undefined && typeof jspm.meta === 'object') {\n                client.jspm.meta = jspm.meta;\n            }\n            // Pass on options to client\n            client.jspm.useBundles = _.isUndefined(karmajspm.useBundles) ? jspm.useBundles : karmajspm.useBundles;\n            client.jspm.stripExtension = _.isUndefined(karmajspm.stripExtension) ? jspm.stripExtension : karmajspm.stripExtension;\n            let baseURL = ctx.toStr(karmajspm.baseURL || jspm.baseURL);\n            let fileBasePath = ctx.toUrl(path.join(basePath, baseURL));\n            client.jspm.baseURL = fileBasePath;\n            console.log('fileBasePath', fileBasePath);\n            console.log('base URL:', chalk.cyan(fileBasePath));\n            let packagesPath = ctx.toUrl(jspm.packages);\n            let browserPath = ctx.toUrl(ctx.toRootPath(ctx.toStr(karmajspm.browser || jspm.browser || '')));\n            let configPaths = Array.isArray(jspm.config) ? jspm.config : [jspm.config];\n            // Add SystemJS loader and jspm config\n            Array.prototype.unshift.apply(files, configPaths.map((configPath) => {\n                return createPattern(configPath);\n            }));\n            // Needed for JSPM 0.17 beta\n            if (jspm.browser) {\n                files.unshift(createPattern(browserPath));\n            }\n            files.unshift(createPattern(adapterfile));\n            files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, 'system-polyfills.src'))));\n            files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, 'system.src'))));\n            function addExpandedFiles() {\n                client.jspm.expandedFiles = _.flatten(_.map(jspm.loadFiles, file => {\n                    files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern)), _.isString(file) ? null : file));\n                    return expandGlob(file, basePath);\n                }));\n            }\n            addExpandedFiles();\n            emitter.on('file_list_modified', addExpandedFiles);\n            // Add served files to files array\n            _.each(jspm.serveFiles, file => {\n                files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern))));\n            });\n            // Allow Karma to serve all files within jspm_packages.\n            // This allows jspm/SystemJS to load them\n            var jspmPattern = createServedPattern(packagesPath + '!(system-polyfills.src.js|system.src.js)/**', { nocache: jspm.cachePackages !== true });\n            jspmPattern.watched = false;\n            files.push(jspmPattern);\n            console.log('------------------------complete jspm pattern:\\n', files);\n        };\n        initJspm.$inject = ['config.files', 'config.basePath', 'config.jspm', 'config.client', 'emitter'];\n        cfg.plugins = cfg.plugins || [];\n        cfg.frameworks = cfg.frameworks || [];\n        // clean.\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.frameworks, it => 'karma-' + it.toLowerCase()));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.reporters, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-reporter';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.browsers, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-launcher';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = _.uniq(cfg.plugins);\n        if (cfg.frameworks.indexOf('jspm') > 0) {\n            cfg.frameworks.splice(cfg.frameworks.indexOf('jspm'), 1);\n        }\n        cfg.frameworks.unshift('jspm');\n        if (cfg.plugins.indexOf('karma-jspm') > 0) {\n            cfg.plugins.splice(cfg.plugins.indexOf('karma-jspm'), 1);\n        }\n        cfg.plugins.unshift({\n            'framework:jspm': ['factory', initJspm]\n        });\n        return cfg;\n    }\n    getDefaultAdapter() {\n        return {\n            name: 'adapter',\n            template: `\r\n(function(karma, System) {\r\n    if (!System) {\r\n        throw new Error('SystemJS was not found. Please make sure you have ' +\r\n            'initialized jspm via installing a dependency with jspm, ' +\r\n            'or by running \"jspm dl-loader\".');\r\n    }\r\n\r\n    System.config({ baseURL: karma.config.jspm.baseURL || './' });\r\n\r\n    var stripExtension = typeof karma.config.jspm.stripExtension === 'boolean' ? karma.config.jspm.stripExtension : true;\r\n\r\n    // Prevent immediately starting tests.\r\n    karma.loaded = function() {\r\n\r\n        if (karma.config.jspm.paths !== undefined &&\r\n            typeof karma.config.jspm.paths === 'object') {\r\n\r\n            System.config({\r\n                paths: karma.config.jspm.paths\r\n            });\r\n        }\r\n\r\n        if (karma.config.jspm.meta !== undefined &&\r\n            typeof karma.config.jspm.meta === 'object') {\r\n            System.config({\r\n                meta: karma.config.jspm.meta\r\n            });\r\n        }\r\n\r\n        // Exclude bundle configurations if useBundles option is not specified\r\n        if (!karma.config.jspm.useBundles) {\r\n            System.bundles = [];\r\n        }\r\n\r\n        // Load everything specified in loadFiles in the specified order\r\n        var promiseChain = Promise.resolve();\r\n        for (var i = 0; i < karma.config.jspm.expandedFiles.length; i++) {\r\n            promiseChain = promiseChain.then((function(moduleName) {\r\n                return function() {\r\n                    return System['import'](moduleName);\r\n                };\r\n            })(extractModuleName(karma.config.jspm.expandedFiles[i])));\r\n        }\r\n\r\n        promiseChain.then(function() {\r\n            karma.start();\r\n        }, function(e) {\r\n            karma.error(e.name + ': ' + e.message);\r\n        });\r\n    };\r\n\r\n    function extractModuleName(fileName) {\r\n        if (stripExtension) {\r\n            return fileName.replace(/\\.js$/, '');\r\n        }\r\n        return fileName;\r\n    }\r\n})(window.__karma__, window.System);`\n        };\n    }\n    checkAdapter(karmajspm, ctx) {\n        let templ = karmajspm.karmaloader;\n        let defaultTempl = this.getDefaultAdapter();\n        if (!templ) {\n            templ = defaultTempl;\n        }\n        else {\n            if (templ.name === defaultTempl.name) {\n                console.log(chalk.red('can not rewrite default adapter named: \"adapter\".'));\n                templ = defaultTempl;\n            }\n        }\n        let adapterfile = path.join(__dirname, './adapters', templ.name);\n        if (!/.js$/.test(adapterfile)) {\n            adapterfile = adapterfile + '.js';\n        }\n        mkdirp.sync(path.dirname(adapterfile));\n        if (!fs.existsSync(adapterfile)) {\n            fs.writeFileSync(adapterfile, templ.template, 'utf8');\n        }\n        return adapterfile;\n    }\n};\nKarmaTest = __decorate([\n    development_core_1.task({\n        order: { value: 0.25, runWay: development_core_1.RunWay.parallel },\n        oper: development_core_1.Operation.default | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], KarmaTest);\nexports.KarmaTest = KarmaTest;\nfunction expandGlob(file, cwd) {\n    return glob.sync(file.pattern || file, { cwd: cwd });\n}\nfunction getPackageFilePath(packagesPath, fileName) {\n    let fm = path.join(packagesPath, fileName + '@*.js');\n    var exists = glob.sync(fm);\n    if (exists && exists.length !== 0) {\n        return fm;\n    }\n    else {\n        return path.join(packagesPath, fileName + '.js');\n    }\n}\nconst createPattern = function (path) {\n    return { pattern: path, included: true, served: true, watched: false };\n};\nconst createServedPattern = function (pathstr, file) {\n    return {\n        pattern: pathstr,\n        included: file && 'included' in file ? file.included : false,\n        served: file && 'served' in file ? file.served : true,\n        nocache: file && 'nocache' in file ? file.nocache : false,\n        watched: file && 'watched' in file ? file.watched : true\n    };\n};\n","import * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\nimport { TaskCallback, Gulp } from 'gulp';\r\n// import * as path from 'path';\r\nimport { Src, ITask, ITaskInfo, Operation, task, ITaskContext, RunWay } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nimport * as karma from 'karma';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nconst glob = require('glob');\r\nconst mkdirp = require('mkdirp');\r\n// import * as mocha from 'gulp-mocha';\r\nimport { IWebTaskOption, KarmaJspmOption, KarmaJspm } from '../WebTaskOption';\r\n\r\n@task({\r\n    order: { value: 0.25, runWay: RunWay.parallel },\r\n    oper: Operation.default | Operation.test\r\n})\r\nexport class KarmaTest implements ITask {\r\n    constructor(private info: ITaskInfo) {\r\n    }\r\n    getInfo() {\r\n        this.info.name = this.info.name || 'web-test';\r\n        return this.info;\r\n    }\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        let option = <IWebTaskOption>ctx.option;\r\n\r\n        let tkn = ctx.subTaskName(this.getInfo());\r\n        gulp.task(tkn, (callback: TaskCallback) => {\r\n            let karmaConfigFile = option.karmaConfigFile || path.join(ctx.env.root, './karma.conf.js');\r\n            karmaConfigFile = ctx.toRootPath(karmaConfigFile);\r\n            let cfg: karma.ConfigOptions = null;\r\n            if (option.karmaConfig) {\r\n                cfg = option.karmaConfig(ctx);\r\n            }\r\n\r\n            cfg = <karma.ConfigOptions>_.extend(cfg || { singleRun: ctx.env.release || ctx.env.deploy || ctx.env.watch !== true }, {\r\n                configFile: karmaConfigFile\r\n            });\r\n            if (option.karmaBasePath) {\r\n                cfg.basePath = ctx.toStr(option.karmaBasePath);\r\n            } else if (_.isUndefined(cfg.basePath)) {\r\n                cfg.basePath = ctx.getDist();\r\n            }\r\n\r\n            cfg.basePath = ctx.toRootPath(cfg.basePath);\r\n\r\n            if (option.karmaJspm) {\r\n                cfg.files = cfg.files || [];\r\n                require(karmaConfigFile)({\r\n                    set(config) {\r\n                        cfg = _.extend(cfg, config);\r\n                    }\r\n                });\r\n                cfg = this.initkarmaJspmPlugin(cfg, ctx);\r\n            }\r\n\r\n            let serve = new karma.Server(\r\n                cfg,\r\n                (code: number) => {\r\n                    if (code === 1) {\r\n                        console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(<any>code));\r\n                        callback(<any>'Unit Test failures, exiting process');\r\n                    } else {\r\n                        console.log('Unit Tests passed', ', code:', chalk.cyan(<any>code));\r\n                        callback();\r\n                    }\r\n                });\r\n\r\n            if (option.karmaJspm) {\r\n                serve.on('file_list_modified', () => {\r\n\r\n                });\r\n            }\r\n            serve.start();\r\n        });\r\n\r\n        return tkn;\r\n    }\r\n\r\n    initkarmaJspmPlugin(cfg: karma.ConfigOptions, ctx: ITaskContext): karma.ConfigOptions {\r\n        let option = <IWebTaskOption>ctx.option;\r\n        let pkg = ctx.getPackage();\r\n\r\n        let karmajspm = _.isFunction(option.karmaJspm) ? option.karmaJspm(ctx) : option.karmaJspm;\r\n        let adapterfile = ctx.toUrl(this.checkAdapter(karmajspm, ctx));\r\n\r\n        let initJspm: any = (files: (karma.FilePattern | string)[], basePath: string, jspm: KarmaJspm, client, emitter) => {\r\n            let dist = ctx.getDist();\r\n            basePath = ctx.toDistPath(path.relative(dist, basePath));\r\n            console.log('--------------------init karma jspm---------------------\\n', 'base path:', chalk.cyan(basePath));\r\n\r\n            jspm = <KarmaJspm>jspm || {};\r\n            if (karmajspm.config) {\r\n                jspm.config = ctx.toSrc(karmajspm.config);\r\n            }\r\n            if (!jspm.config && pkg.jspm) {\r\n                jspm.config = ctx.toRootPath(pkg.jspm.configFile);\r\n            } else {\r\n                jspm.config = _.isString(jspm.config) ? path.join(basePath, jspm.config) : _.map(jspm.config, it => path.join(it, <string>it));\r\n            }\r\n\r\n            jspm.config = _.isString(jspm.config) ? ctx.toUrl(jspm.config) : _.map(jspm.config, it => ctx.toUrl(<string>it));\r\n\r\n            jspm.loadFiles = jspm.loadFiles || [];\r\n            jspm.serveFiles = jspm.serveFiles || [];\r\n            if (karmajspm.loadFiles) {\r\n                jspm.loadFiles.concat(_.isFunction(karmajspm.loadFiles) ? karmajspm.loadFiles(ctx) : karmajspm.loadFiles);\r\n            }\r\n            if (karmajspm.serveFiles) {\r\n                jspm.serveFiles.concat(_.isFunction(karmajspm.serveFiles) ? karmajspm.serveFiles(ctx) : karmajspm.serveFiles);\r\n            }\r\n\r\n            if (karmajspm.packages) {\r\n                jspm.packages = ctx.toStr(jspm.packages || karmajspm.packages);\r\n            }\r\n            if (!jspm.packages && pkg.jspm && pkg.jspm.directories) {\r\n                jspm.packages = ctx.toRootPath(pkg.jspm.directories.packages);\r\n            } else {\r\n                jspm.packages = path.join(basePath, jspm.packages);\r\n            }\r\n\r\n            jspm.cachePackages = _.isUndefined(karmajspm.cachePackages) ? jspm.cachePackages : jspm.cachePackages;\r\n\r\n\r\n            client.jspm = client.jspm || {};\r\n            if (jspm.paths !== undefined && typeof jspm.paths === 'object') {\r\n                client.jspm.paths = jspm.paths;\r\n            }\r\n            if (jspm.meta !== undefined && typeof jspm.meta === 'object') {\r\n                client.jspm.meta = jspm.meta;\r\n            }\r\n\r\n            // Pass on options to client\r\n            client.jspm.useBundles = _.isUndefined(karmajspm.useBundles) ? jspm.useBundles : karmajspm.useBundles;\r\n            client.jspm.stripExtension = _.isUndefined(karmajspm.stripExtension) ? jspm.stripExtension : karmajspm.stripExtension;\r\n\r\n            let baseURL = ctx.toStr(karmajspm.baseURL || jspm.baseURL);\r\n            let fileBasePath = ctx.toUrl(path.join(basePath, baseURL));\r\n            client.jspm.baseURL = fileBasePath;\r\n\r\n            console.log('fileBasePath', fileBasePath);\r\n            console.log('base URL:', chalk.cyan(fileBasePath));\r\n\r\n            let packagesPath = ctx.toUrl(jspm.packages);\r\n            let browserPath = ctx.toUrl(ctx.toRootPath(ctx.toStr(karmajspm.browser || jspm.browser || '')));\r\n            let configPaths: string[] = Array.isArray(jspm.config) ? <string[]>jspm.config : [<string>jspm.config];\r\n            // Add SystemJS loader and jspm config\r\n\r\n\r\n            Array.prototype.unshift.apply(files,\r\n                configPaths.map((configPath) => {\r\n                    return createPattern(configPath)\r\n                })\r\n            );\r\n\r\n            // Needed for JSPM 0.17 beta\r\n            if (jspm.browser) {\r\n                files.unshift(createPattern(browserPath));\r\n            }\r\n\r\n            files.unshift(createPattern(adapterfile));\r\n            files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, 'system-polyfills.src'))));\r\n            files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, 'system.src'))));\r\n\r\n            function addExpandedFiles() {\r\n                client.jspm.expandedFiles = _.flatten(_.map(jspm.loadFiles, file => {\r\n                    files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern)), _.isString(file) ? null : file));\r\n                    return expandGlob(file, basePath);\r\n                }));\r\n            }\r\n            addExpandedFiles();\r\n\r\n            emitter.on('file_list_modified', addExpandedFiles);\r\n\r\n            // Add served files to files array\r\n            _.each(jspm.serveFiles, file => {\r\n                files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern))));\r\n            });\r\n\r\n            // Allow Karma to serve all files within jspm_packages.\r\n            // This allows jspm/SystemJS to load them\r\n            var jspmPattern = createServedPattern(\r\n                packagesPath + '!(system-polyfills.src.js|system.src.js)/**', { nocache: jspm.cachePackages !== true }\r\n            );\r\n            jspmPattern.watched = false;\r\n            files.push(jspmPattern);\r\n\r\n            console.log('------------------------complete jspm pattern:\\n', files);\r\n        };\r\n        initJspm.$inject = ['config.files', 'config.basePath', 'config.jspm', 'config.client', 'emitter'];\r\n\r\n        cfg.plugins = cfg.plugins || [];\r\n        cfg.frameworks = cfg.frameworks || [];\r\n        // clean.\r\n\r\n\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.frameworks, it => 'karma-' + it.toLowerCase()));\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.reporters, it => {\r\n            let packname = 'karma-' + it.toLowerCase() + '-reporter'\r\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\r\n                return packname;\r\n            }\r\n            return 'karma-' + it;\r\n        }));\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.browsers, it => {\r\n            let packname = 'karma-' + it.toLowerCase() + '-launcher';\r\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\r\n                return packname;\r\n            }\r\n            return 'karma-' + it;\r\n        }));\r\n        cfg.plugins = _.uniq(cfg.plugins);\r\n\r\n        if (cfg.frameworks.indexOf('jspm') > 0) {\r\n            cfg.frameworks.splice(cfg.frameworks.indexOf('jspm'), 1);\r\n        }\r\n        cfg.frameworks.unshift('jspm');\r\n\r\n        if (cfg.plugins.indexOf('karma-jspm') > 0) {\r\n            cfg.plugins.splice(cfg.plugins.indexOf('karma-jspm'), 1);\r\n        }\r\n        cfg.plugins.unshift({\r\n            'framework:jspm': ['factory', initJspm]\r\n        });\r\n\r\n        return cfg;\r\n    }\r\n\r\n\r\n    getDefaultAdapter() {\r\n        return {\r\n            name: 'adapter',\r\n            template: `\r\n(function(karma, System) {\r\n    if (!System) {\r\n        throw new Error('SystemJS was not found. Please make sure you have ' +\r\n            'initialized jspm via installing a dependency with jspm, ' +\r\n            'or by running \"jspm dl-loader\".');\r\n    }\r\n\r\n    System.config({ baseURL: karma.config.jspm.baseURL || './' });\r\n\r\n    var stripExtension = typeof karma.config.jspm.stripExtension === 'boolean' ? karma.config.jspm.stripExtension : true;\r\n\r\n    // Prevent immediately starting tests.\r\n    karma.loaded = function() {\r\n\r\n        if (karma.config.jspm.paths !== undefined &&\r\n            typeof karma.config.jspm.paths === 'object') {\r\n\r\n            System.config({\r\n                paths: karma.config.jspm.paths\r\n            });\r\n        }\r\n\r\n        if (karma.config.jspm.meta !== undefined &&\r\n            typeof karma.config.jspm.meta === 'object') {\r\n            System.config({\r\n                meta: karma.config.jspm.meta\r\n            });\r\n        }\r\n\r\n        // Exclude bundle configurations if useBundles option is not specified\r\n        if (!karma.config.jspm.useBundles) {\r\n            System.bundles = [];\r\n        }\r\n\r\n        // Load everything specified in loadFiles in the specified order\r\n        var promiseChain = Promise.resolve();\r\n        for (var i = 0; i < karma.config.jspm.expandedFiles.length; i++) {\r\n            promiseChain = promiseChain.then((function(moduleName) {\r\n                return function() {\r\n                    return System['import'](moduleName);\r\n                };\r\n            })(extractModuleName(karma.config.jspm.expandedFiles[i])));\r\n        }\r\n\r\n        promiseChain.then(function() {\r\n            karma.start();\r\n        }, function(e) {\r\n            karma.error(e.name + ': ' + e.message);\r\n        });\r\n    };\r\n\r\n    function extractModuleName(fileName) {\r\n        if (stripExtension) {\r\n            return fileName.replace(/\\.js$/, '');\r\n        }\r\n        return fileName;\r\n    }\r\n})(window.__karma__, window.System);`\r\n        };\r\n    }\r\n\r\n\r\n    checkAdapter(karmajspm: KarmaJspmOption, ctx: ITaskContext): string {\r\n\r\n        let templ = karmajspm.karmaloader;\r\n        let defaultTempl = this.getDefaultAdapter();\r\n        if (!templ) {\r\n            templ = defaultTempl;\r\n        } else {\r\n            if (templ.name === defaultTempl.name) {\r\n                console.log(chalk.red('can not rewrite default adapter named: \"adapter\".'));\r\n                templ = defaultTempl;\r\n            }\r\n        }\r\n\r\n        let adapterfile = path.join(__dirname, './adapters', templ.name);\r\n        if (!/.js$/.test(adapterfile)) {\r\n            adapterfile = adapterfile + '.js';\r\n        }\r\n        mkdirp.sync(path.dirname(adapterfile));\r\n        if (!fs.existsSync(adapterfile)) {\r\n            fs.writeFileSync(adapterfile, templ.template, 'utf8')\r\n        }\r\n\r\n        return adapterfile;\r\n    }\r\n}\r\n\r\nfunction expandGlob(file, cwd: string) {\r\n    return glob.sync(file.pattern || file, { cwd: cwd });\r\n}\r\n\r\nfunction getPackageFilePath(packagesPath: string, fileName: string): string {\r\n    let fm = path.join(packagesPath, fileName + '@*.js');\r\n    var exists = glob.sync(fm);\r\n    if (exists && exists.length !== 0) {\r\n        return fm;\r\n    } else {\r\n        return path.join(packagesPath, fileName + '.js');\r\n    }\r\n}\r\n\r\nconst createPattern = function (path: string) {\r\n    return { pattern: path, included: true, served: true, watched: false };\r\n};\r\n\r\nconst createServedPattern = function (pathstr: string, file?) {\r\n    return {\r\n        pattern: pathstr,\r\n        included: file && 'included' in file ? file.included : false,\r\n        served: file && 'served' in file ? file.served : true,\r\n        nocache: file && 'nocache' in file ? file.nocache : false,\r\n        watched: file && 'watched' in file ? file.watched : true\r\n    };\r\n};\r\n"]}