{"version":3,"sources":["tasks/test.js"],"names":["getPackageFilePath","packagesPath","fileName","fm","path","join","exists","glob","sync","length","__decorate","decorators","target","key","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","chalk","require","development_core_1","karma","KarmaTest","this","info","_createClass","value","name","_this","tkn","ctx","subTaskName","getInfo","cfg","gulp","task","callback","karmaConfigFile","option","configFile","env","root","toRootPath","set","config","extend","singleRun","release","deploy","watch","basePath","toStr","getDist","files","code","console","log","red","cyan","undefined","bundleDest","dir","fs","serve","each","sf","f","isDirectory","paths","p","prefix","toUrl","rootpath","_this2","pkg","karmajspm","isFunction","readdirSync","jspm","isBoolean","lstatSync","jspmcfg","checkAdapter","packages","directories","toSrc","toDistSrc","map","it","isUndefined","cachePackages","relpkg","relative","test","resetBase","getRootPath","rlpk","isString","relpth","baseURL","res","push","pattern","toDistPath","included","abr","url","resolve","proxies","loadFiles","resource","concat","serveFiles","frameworks","toLowerCase","plugins","reporters","packname","dependencies","devDependencies","browsers","emitter","client","expandedFiles","flatten","file","fileBasePath","createServedPattern","flname","useBundles","filter","meta","browserPath","browser","configPaths","isArray","Array","prototype","unshift","apply","configPath","createPattern","initJspm","adapterfile","addExpandedFiles","jspmPattern","nocache","$inject","template","total","templ","karmaloader","Operation","defaultTempl","__dirname","mkdirp","dirname","writeFileSync","watched","order","runWay","RunWay","parallel","oper","default","exports","served","pathstr"],"mappings":"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","file":"../../tasks/test.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst chalk = require('chalk');\n// import * as path from 'path';\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst karma = require('karma');\nconst fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\nconst mkdirp = require('mkdirp');\nconst url = require('url');\nlet KarmaTest = class KarmaTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'web-test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option.karma || {};\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.configFile || path.join(ctx.env.root, './karma.conf.js');\n            karmaConfigFile = ctx.toRootPath(karmaConfigFile);\n            let cfg = {};\n            // get config.\n            require(karmaConfigFile)({\n                set(config) {\n                    cfg = _.extend(cfg, config);\n                }\n            });\n            if (option.config) {\n                cfg = option.config(ctx);\n            }\n            cfg = _.extend(cfg, { singleRun: ctx.env.release || ctx.env.deploy || ctx.env.watch !== true });\n            if (option.basePath) {\n                cfg.basePath = ctx.toStr(option.basePath);\n            }\n            else if (_.isUndefined(cfg.basePath)) {\n                cfg.basePath = ctx.getDist();\n            }\n            cfg.basePath = ctx.toRootPath(cfg.basePath);\n            if (option.jspm) {\n                cfg.files = cfg.files || [];\n                cfg = this.initkarmaJspmPlugin(cfg, ctx);\n            }\n            let serve = new karma.Server(cfg, (code) => {\n                if (code === 1) {\n                    console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(code));\n                    callback('Unit Test failures, exiting process');\n                }\n                else {\n                    console.log('Unit Tests passed', ', code:', chalk.cyan(code));\n                    callback();\n                }\n            });\n            serve.start();\n        });\n        return tkn;\n    }\n    getRelativePaths(ctx, rootpath, prefix = '') {\n        let paths = {};\n        let bundleDest = ctx.getDist();\n        let dir = fs.readdirSync(bundleDest);\n        _.each(dir, (d) => {\n            let sf = path.join(bundleDest, d);\n            let f = fs.lstatSync(sf);\n            if (f.isDirectory()) {\n                let p = '/' + d + '/*';\n                paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\n            }\n        });\n        let p = '*';\n        paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\n        // let jpk = <string>option.jspmPackages;\n        // let jp = path.basename(jpk) + '/*';\n        // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\n        return paths;\n    }\n    initkarmaJspmPlugin(cfg, ctx) {\n        let option = ctx.option.karma || {};\n        let pkg = ctx.getPackage();\n        let karmajspm;\n        if (_.isFunction(option.jspm)) {\n            karmajspm = option.jspm(ctx);\n        }\n        else if (_.isBoolean(karma)) {\n            karmajspm = {};\n        }\n        else {\n            karmajspm = option.jspm;\n        }\n        let jspmcfg = cfg['jspm'] || {};\n        let adapterfile = ctx.toUrl(this.checkAdapter(karmajspm, ctx));\n        if (karmajspm.packages) {\n            jspmcfg.packages = ctx.toRootPath(ctx.toStr(karmajspm.packages));\n        }\n        else {\n            if (!jspmcfg.packages && pkg.jspm && pkg.jspm.directories) {\n                jspmcfg.packages = ctx.toRootPath(pkg.jspm.directories.packages);\n            }\n            else if (jspmcfg.packages) {\n                jspmcfg.packages = ctx.toRootPath(jspmcfg.packages);\n            }\n        }\n        if (karmajspm.config) {\n            jspmcfg.config = ctx.toDistSrc(ctx.toSrc(karmajspm.config));\n        }\n        else {\n            if (!jspmcfg.config && pkg.jspm) {\n                jspmcfg.config = ctx.toRootPath(pkg.jspm.configFile);\n            }\n            else if (jspmcfg.config) {\n                jspmcfg.config = ctx.toDistSrc(jspmcfg.config);\n            }\n        }\n        jspmcfg.config = _.isString(jspmcfg.config) ? ctx.toUrl(jspmcfg.config) : _.map(jspmcfg.config, it => ctx.toUrl(it));\n        jspmcfg.baseURL = ctx.toStr(karmajspm.baseURL || jspmcfg.baseURL || '');\n        if (!_.isUndefined(karmajspm.cachePackages)) {\n            jspmcfg.cachePackages = karmajspm.cachePackages;\n        }\n        let relpkg = path.relative(cfg.basePath, jspmcfg.packages);\n        let resetBase = false;\n        if (/^\\.\\./.test(relpkg)) {\n            resetBase = true;\n            let root = cfg.basePath = ctx.getRootPath();\n            jspmcfg.paths = this.getRelativePaths(ctx, cfg.basePath); // , 'base/');\n            let rlpk = ctx.toUrl(root, jspmcfg.packages) + '/*';\n            jspmcfg.paths[rlpk] = 'base/' + rlpk;\n            let res;\n            if (_.isFunction(karmajspm.resource)) {\n                res = karmajspm.resource(ctx);\n            }\n            else {\n                res = karmajspm.resource || ['public', 'asserts'];\n            }\n            let relpth = ctx.toUrl(root, ctx.getDist());\n            cfg.proxies = cfg.proxies || {};\n            cfg.files = cfg.files || [];\n            _.each(_.isString(res) ? [res] : res, r => {\n                cfg.files.push({ pattern: ctx.toUrl(ctx.toDistPath(r)) + '/**', included: false });\n                let abr = /^\\//.test(r) ? ('base' + r) : ('base/' + r);\n                cfg.proxies[abr] = url.resolve(relpth, r);\n            });\n            // jspmcfg.paths = jspmcfg.paths || {};\n            // jspmcfg.baseURL = ctx.toUrl(root, ctx.getDist());\n            // let rlpk = ctx.toUrl(root, jspmcfg.packages) + '/*';\n            // jspmcfg.paths[rlpk] = '/base/' + rlpk;\n            console.log('paths: ', jspmcfg.paths);\n            cfg.proxies = _.extend(cfg.proxies, jspmcfg.paths);\n        }\n        jspmcfg.loadFiles = jspmcfg.loadFiles || [];\n        jspmcfg.serveFiles = jspmcfg.serveFiles || [];\n        if (karmajspm.loadFiles) {\n            jspmcfg.loadFiles = jspmcfg.loadFiles.concat(_.isFunction(karmajspm.loadFiles) ? karmajspm.loadFiles(ctx) : karmajspm.loadFiles);\n        }\n        if (karmajspm.serveFiles) {\n            jspmcfg.serveFiles = jspmcfg.serveFiles.concat(_.isFunction(karmajspm.serveFiles) ? karmajspm.serveFiles(ctx) : karmajspm.serveFiles);\n        }\n        cfg.plugins = _.filter(cfg.plugins || [], it => it !== 'karma-jspm');\n        cfg.frameworks = _.filter(cfg.frameworks || [], it => it !== 'jspm');\n        // clean.\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.frameworks, it => 'karma-' + it.toLowerCase()));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.reporters, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-reporter';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.browsers, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-launcher';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = _.uniq(cfg.plugins);\n        let initJspm = (files, basePath, jspm, client, emitter) => {\n            console.log('--------------------init karma jspm---------------------\\n', 'base path:', chalk.cyan(basePath));\n            jspm = jspm || {};\n            jspm = _.extend(jspm || {}, jspmcfg);\n            client.jspm = client.jspm || {};\n            if (jspm.paths !== undefined && typeof jspm.paths === 'object') {\n                client.jspm.paths = jspm.paths;\n            }\n            if (jspm.meta !== undefined && typeof jspm.meta === 'object') {\n                client.jspm.meta = jspm.meta;\n            }\n            // Pass on options to client\n            client.jspm.useBundles = jspm.useBundles;\n            client.jspm.stripExtension = jspm.stripExtension;\n            let baseURL = jspm.baseURL;\n            client.jspm.baseURL = baseURL || '';\n            console.log('base URL:', chalk.cyan(baseURL));\n            let fileBasePath = ctx.toUrl(resetBase ? ctx.getDist() : path.join(basePath, baseURL));\n            console.log('fileBasePath', fileBasePath);\n            let packagesPath = ctx.toUrl(jspm.packages);\n            let browserPath = ctx.toUrl(ctx.toRootPath(ctx.toStr(jspm.browser || '')));\n            let configPaths = Array.isArray(jspm.config) ? jspm.config : [jspm.config];\n            // Add SystemJS loader and jspm config\n            Array.prototype.unshift.apply(files, configPaths.map((configPath) => {\n                return createPattern(configPath);\n            }));\n            // Needed for JSPM 0.17 beta\n            if (jspm.browser) {\n                files.unshift(createPattern(browserPath));\n            }\n            files.unshift(createPattern(adapterfile));\n            files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, 'system-polyfills.src'))));\n            files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, 'system.src'))));\n            function addExpandedFiles() {\n                client.jspm.expandedFiles = _.flatten(_.map(jspm.loadFiles, file => {\n                    let flname = path.join(fileBasePath, _.isString(file) ? file : file.pattern);\n                    files.push(createServedPattern(ctx.toUrl(flname), _.isString(file) ? null : file));\n                    return _.map(glob.sync(flname), (fm) => ctx.toUrl(fileBasePath, fm));\n                }));\n                console.log('expandedFiles:', client.jspm.expandedFiles);\n            }\n            addExpandedFiles();\n            emitter.on('file_list_modified', addExpandedFiles);\n            // Add served files to files array\n            _.each(jspm.serveFiles, file => {\n                files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern))));\n            });\n            // Allow Karma to serve all files within jspm_packages.\n            // This allows jspm/SystemJS to load them\n            var jspmPattern = createServedPattern(ctx.toUrl(path.join(packagesPath, '!(system-polyfills.src.js|system.src.js)/**')), { nocache: jspm.cachePackages !== true });\n            jspmPattern.watched = false;\n            files.push(jspmPattern);\n            console.log('------------------------complete jspm pattern:\\n', files);\n        };\n        initJspm.$inject = ['config.files', 'config.basePath', 'config.jspm', 'config.client', 'emitter'];\n        cfg.frameworks.unshift('jspmdev');\n        cfg.plugins.unshift({\n            'framework:jspmdev': ['factory', initJspm]\n        });\n        return cfg;\n    }\n    getDefaultAdapter() {\n        return {\n            name: 'adapter',\n            template: `\r\n(function(karma, System) {\r\n    if (!System) {\r\n        throw new Error('SystemJS was not found. Please make sure you have ' +\r\n            'initialized jspm via installing a dependency with jspm, ' +\r\n            'or by running \"jspm dl-loader\".');\r\n    }\r\n\r\n\r\n    System.config({ baseURL: karma.config.jspm.baseURL?  'base/'+ karma.config.jspm.baseURL : 'base' });\r\n    \r\n\r\n    var stripExtension = typeof karma.config.jspm.stripExtension === 'boolean' ? karma.config.jspm.stripExtension : true;\r\n\r\n    // Prevent immediately starting tests.\r\n    karma.loaded = function() {\r\n\r\n        if (karma.config.jspm.paths !== undefined &&\r\n            typeof karma.config.jspm.paths === 'object') {\r\n\r\n            System.config({\r\n                paths: karma.config.jspm.paths\r\n            });\r\n        }\r\n\r\n        if (karma.config.jspm.meta !== undefined &&\r\n            typeof karma.config.jspm.meta === 'object') {\r\n            System.config({\r\n                meta: karma.config.jspm.meta\r\n            });\r\n        }\r\n\r\n        // Exclude bundle configurations if useBundles option is not specified\r\n        if (!karma.config.jspm.useBundles) {\r\n            System.bundles = [];\r\n        }\r\n\r\n        // Load everything specified in loadFiles in the specified order\r\n        var promiseChain = Promise.resolve();\r\n        for (var i = 0; i < karma.config.jspm.expandedFiles.length; i++) {\r\n            promiseChain = promiseChain.then((function(moduleName) {\r\n                return function() {\r\n                    return System['import'](moduleName);\r\n                };\r\n            })(extractModuleName(karma.config.jspm.expandedFiles[i])));\r\n        }\r\n\r\n        promiseChain.then(function() {\r\n            karma.start();\r\n        }, function(e) {\r\n            karma.error(e.name + ': ' + e.message);\r\n        });\r\n    };\r\n\r\n    function extractModuleName(fileName) {\r\n        if (stripExtension) {\r\n            return fileName.replace(/\\.js$/, '');\r\n        }\r\n        return fileName;\r\n    }\r\n})(window.__karma__, window.System);`\n        };\n    }\n    checkAdapter(karmajspm, ctx) {\n        let templ = karmajspm.karmaloader;\n        let defaultTempl = this.getDefaultAdapter();\n        if (!templ) {\n            templ = defaultTempl;\n        }\n        else {\n            if (templ.name === defaultTempl.name) {\n                console.log(chalk.red('can not rewrite default adapter named: \"adapter\".'));\n                templ = defaultTempl;\n            }\n        }\n        let adapterfile = path.join(__dirname, './adapters', templ.name);\n        if (!/.js$/.test(adapterfile)) {\n            adapterfile = adapterfile + '.js';\n        }\n        mkdirp.sync(path.dirname(adapterfile));\n        if (!fs.existsSync(adapterfile)) {\n            fs.writeFileSync(adapterfile, templ.template, 'utf8');\n        }\n        return adapterfile;\n    }\n};\nKarmaTest = __decorate([\n    development_core_1.task({\n        order: total => { return { value: 2 / total, runWay: development_core_1.RunWay.parallel }; },\n        oper: development_core_1.Operation.default | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], KarmaTest);\nexports.KarmaTest = KarmaTest;\nfunction getPackageFilePath(packagesPath, fileName) {\n    let fm = path.join(packagesPath, fileName + '@*.js');\n    var exists = glob.sync(fm);\n    if (exists && exists.length !== 0) {\n        return fm;\n    }\n    else {\n        return path.join(packagesPath, fileName + '.js');\n    }\n}\nconst createPattern = function (path) {\n    return { pattern: path, included: true, served: true, watched: false };\n};\nconst createServedPattern = function (pathstr, file) {\n    return {\n        pattern: pathstr,\n        included: file && 'included' in file ? file.included : false,\n        served: file && 'served' in file ? file.served : true,\n        nocache: file && 'nocache' in file ? file.nocache : false,\n        watched: file && 'watched' in file ? file.watched : true\n    };\n};\n"]}