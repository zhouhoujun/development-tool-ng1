{"version":3,"sources":["tasks/test.ts"],"names":["getPackageFilePath","packagesPath","fileName","fm","path","join","exists","glob","sync","length","_","require","chalk","development_core_1","karma","fs","mkdirp","url","KarmaTest","info","this","prototype","getInfo","name","setup","ctx","gulp","_this","option","tkn","subTaskName","task","callback","karmaConfigFile","configFile","env","root","toRootPath","cfg","set","config","extend","singleRun","release","deploy","watch","basePath","toStr","isUndefined","getDist","jspm","files","initkarmaJspmPlugin","serve","Server","code","console","log","red","cyan","start","getRelativePaths","rootpath","prefix","paths","bundleDest","dir","readdirSync","each","d","sf","f","lstatSync","isDirectory","p_1","toUrl","p","karmajspm","pkg","getPackage","isFunction","isBoolean","jspmcfg","adapterfile","checkAdapter","packages","directories","toDistSrc","toSrc","isString","map","it","baseURL","cachePackages","relpkg","relative","resetBase","test","getRootPath","rlpk","res","resource","relpth_1","proxies","r","push","pattern","toDistPath","included","abr","resolve","loadFiles","serveFiles","concat","plugins","filter","frameworks","toLowerCase","reporters","packname","dependencies","devDependencies","browsers","uniq","initJspm","client","emitter","addExpandedFiles","expandedFiles","flatten","file","flname","fileBasePath","createServedPattern","undefined","meta","useBundles","stripExtension","browserPath","browser","configPaths","Array","isArray","unshift","apply","configPath","createPattern","sysjs","systemjs","on","jspmPattern","nocache","watched","$inject","framework:jspmdev","getDefaultAdapter","template","templ","karmaloader","defaultTempl","__dirname","dirname","existsSync","writeFileSync","__decorate","order","total","value","runWay","RunWay","parallel","oper","Operation","default","exports","served","pathstr"],"mappings":"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","file":"../../tasks/test.js","sourcesContent":["import * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\nimport { TaskCallback, Gulp } from 'gulp';\r\n// import * as path from 'path';\r\nimport { Src, ITask, ITaskInfo, Operation, task, ITaskContext, RunWay } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nimport * as karma from 'karma';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nconst glob = require('glob');\r\nconst mkdirp = require('mkdirp');\r\nimport * as url from 'url';\r\n// import * as mocha from 'gulp-mocha';\r\nimport { IWebTaskOption, KarmaJspmOption, KarmaJspm } from '../WebTaskOption';\r\n\r\n@task({\r\n    order: total => { return { value: 2 / total, runWay: RunWay.parallel } },\r\n    oper: Operation.default | Operation.test\r\n})\r\nexport class KarmaTest implements ITask {\r\n    constructor(private info: ITaskInfo) {\r\n    }\r\n    getInfo() {\r\n        this.info.name = this.info.name || 'web-test';\r\n        return this.info;\r\n    }\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        let option = (<IWebTaskOption>ctx.option).karma || {};\r\n\r\n        let tkn = ctx.subTaskName(this.getInfo());\r\n        gulp.task(tkn, (callback: TaskCallback) => {\r\n            let karmaConfigFile = option.configFile || path.join(ctx.env.root, './karma.conf.js');\r\n            karmaConfigFile = ctx.toRootPath(karmaConfigFile);\r\n            let cfg: karma.ConfigOptions = {};\r\n            // get config.\r\n            require(karmaConfigFile)({\r\n                set(config) {\r\n                    cfg = _.extend(cfg, config);\r\n                }\r\n            });\r\n            if (option.config) {\r\n                cfg = option.config(ctx);\r\n            }\r\n\r\n            cfg = <karma.ConfigOptions>_.extend(cfg, { singleRun: ctx.env.release || ctx.env.deploy || ctx.env.watch !== true });\r\n            if (option.basePath) {\r\n                cfg.basePath = ctx.toStr(option.basePath);\r\n            } else if (_.isUndefined(cfg.basePath)) {\r\n                cfg.basePath = ctx.getDist();\r\n            }\r\n\r\n            cfg.basePath = ctx.toRootPath(cfg.basePath);\r\n\r\n            if (option.jspm) {\r\n                cfg.files = cfg.files || [];\r\n                cfg = this.initkarmaJspmPlugin(cfg, ctx);\r\n            }\r\n\r\n            let serve = new karma.Server(\r\n                cfg,\r\n                (code: number) => {\r\n                    if (code === 1) {\r\n                        console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(<any>code));\r\n                        callback(<any>'Unit Test failures, exiting process');\r\n                    } else {\r\n                        console.log('Unit Tests passed', ', code:', chalk.cyan(<any>code));\r\n                        callback();\r\n                    }\r\n                });\r\n\r\n            serve.start();\r\n        });\r\n\r\n        return tkn;\r\n    }\r\n\r\n    getRelativePaths(ctx: ITaskContext, rootpath: string, prefix = '') {\r\n        let paths: any = {};\r\n        let bundleDest = ctx.getDist();\r\n        let dir = fs.readdirSync(bundleDest);\r\n        _.each(dir, (d: string) => {\r\n\r\n            let sf = path.join(bundleDest, d);\r\n            let f = fs.lstatSync(sf);\r\n            if (f.isDirectory()) {\r\n                let p = '/' + d + '/*';\r\n                paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\r\n            }\r\n        });\r\n        let p = '*'\r\n        paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\r\n        // let jpk = <string>option.jspmPackages;\r\n        // let jp = path.basename(jpk) + '/*';\r\n        // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\r\n\r\n        return paths;\r\n    }\r\n\r\n\r\n    initkarmaJspmPlugin(cfg: karma.ConfigOptions, ctx: ITaskContext): karma.ConfigOptions {\r\n        let option = (<IWebTaskOption>ctx.option).karma || {};\r\n        let pkg = ctx.getPackage();\r\n\r\n        let karmajspm: KarmaJspmOption;\r\n        if (_.isFunction(option.jspm)) {\r\n            karmajspm = option.jspm(ctx);\r\n        } else if (_.isBoolean(karma)) {\r\n            karmajspm = {};\r\n        } else {\r\n            karmajspm = option.jspm;\r\n        }\r\n        let jspmcfg: KarmaJspm = cfg['jspm'] || {};\r\n\r\n        let adapterfile = ctx.toUrl(this.checkAdapter(karmajspm, ctx));\r\n\r\n        if (karmajspm.packages) {\r\n            jspmcfg.packages = ctx.toRootPath(ctx.toStr(karmajspm.packages));\r\n        } else {\r\n            if (!jspmcfg.packages && pkg.jspm && pkg.jspm.directories) {\r\n                jspmcfg.packages = ctx.toRootPath(pkg.jspm.directories.packages);\r\n            } else if (jspmcfg.packages) {\r\n                jspmcfg.packages = ctx.toRootPath(jspmcfg.packages);\r\n            }\r\n        }\r\n        if (karmajspm.config) {\r\n            jspmcfg.config = ctx.toDistSrc(ctx.toSrc(karmajspm.config));\r\n        } else {\r\n            if (!jspmcfg.config && pkg.jspm) {\r\n                jspmcfg.config = ctx.toRootPath(pkg.jspm.configFile);\r\n            } else if (jspmcfg.config) {\r\n                jspmcfg.config = ctx.toDistSrc(jspmcfg.config);\r\n            }\r\n        }\r\n\r\n        jspmcfg.config = _.isString(jspmcfg.config) ? ctx.toUrl(jspmcfg.config) : _.map(jspmcfg.config, it => ctx.toUrl(it));\r\n\r\n        jspmcfg.baseURL = ctx.toStr(karmajspm.baseURL || jspmcfg.baseURL || '');\r\n        if (!_.isUndefined(karmajspm.cachePackages)) {\r\n            jspmcfg.cachePackages = karmajspm.cachePackages;\r\n        }\r\n\r\n        let relpkg = path.relative(cfg.basePath, jspmcfg.packages);\r\n        let resetBase = false;\r\n        if (/^\\.\\./.test(relpkg)) {\r\n            resetBase = true;\r\n            let root = cfg.basePath = ctx.getRootPath();\r\n            jspmcfg.paths = this.getRelativePaths(ctx, cfg.basePath); // , 'base/');\r\n            let rlpk = ctx.toUrl(root, jspmcfg.packages) + '/*';\r\n            jspmcfg.paths[rlpk] = 'base/' + rlpk;\r\n\r\n            let res: Src;\r\n            if (_.isFunction(karmajspm.resource)) {\r\n                res = karmajspm.resource(ctx);\r\n            } else {\r\n                res = karmajspm.resource || ['public', 'asserts'];\r\n            }\r\n            let relpth = ctx.toUrl(root, ctx.getDist());\r\n            cfg.proxies = cfg.proxies || {};\r\n            cfg.files = cfg.files || [];\r\n            _.each(_.isString(res) ? [res] : res, r => {\r\n                cfg.files.push({ pattern: ctx.toUrl(ctx.toDistPath(r)) + '/**', included: false });\r\n\r\n                let abr = /^\\//.test(r) ? ('base' + r) : ('base/' + r);\r\n                cfg.proxies[abr] = url.resolve(relpth, r);\r\n            });\r\n\r\n            // jspmcfg.paths = jspmcfg.paths || {};\r\n            // jspmcfg.baseURL = ctx.toUrl(root, ctx.getDist());\r\n            // let rlpk = ctx.toUrl(root, jspmcfg.packages) + '/*';\r\n            // jspmcfg.paths[rlpk] = '/base/' + rlpk;\r\n            console.log('paths: ', jspmcfg.paths);\r\n\r\n            cfg.proxies = _.extend(cfg.proxies, jspmcfg.paths);\r\n        }\r\n\r\n        jspmcfg.loadFiles = jspmcfg.loadFiles || [];\r\n        jspmcfg.serveFiles = jspmcfg.serveFiles || [];\r\n\r\n        if (karmajspm.loadFiles) {\r\n            jspmcfg.loadFiles = jspmcfg.loadFiles.concat(_.isFunction(karmajspm.loadFiles) ? karmajspm.loadFiles(ctx) : karmajspm.loadFiles);\r\n        }\r\n        if (karmajspm.serveFiles) {\r\n            jspmcfg.serveFiles = jspmcfg.serveFiles.concat(_.isFunction(karmajspm.serveFiles) ? karmajspm.serveFiles(ctx) : karmajspm.serveFiles);\r\n        }\r\n\r\n        cfg.plugins = _.filter(cfg.plugins || [], it => it !== 'karma-jspm');\r\n        cfg.frameworks = _.filter(cfg.frameworks || [], it => it !== 'jspm');\r\n        // clean.\r\n\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.frameworks, it => 'karma-' + it.toLowerCase()));\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.reporters, it => {\r\n            let packname = 'karma-' + it.toLowerCase() + '-reporter'\r\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\r\n                return packname;\r\n            }\r\n            return 'karma-' + it;\r\n        }));\r\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.browsers, it => {\r\n            let packname = 'karma-' + it.toLowerCase() + '-launcher';\r\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\r\n                return packname;\r\n            }\r\n            return 'karma-' + it;\r\n        }));\r\n        cfg.plugins = _.uniq(cfg.plugins);\r\n\r\n\r\n\r\n        let initJspm: any = (files: (karma.FilePattern | string)[], basePath: string, jspm: KarmaJspm, client, emitter) => {\r\n            console.log('--------------------init karma jspm---------------------\\n', 'base path:', chalk.cyan(basePath));\r\n            jspm = jspm || {}\r\n\r\n            jspm = _.extend(jspm || {}, jspmcfg);\r\n\r\n            client.jspm = client.jspm || {};\r\n            if (jspm.paths !== undefined && typeof jspm.paths === 'object') {\r\n                client.jspm.paths = jspm.paths;\r\n            }\r\n            if (jspm.meta !== undefined && typeof jspm.meta === 'object') {\r\n                client.jspm.meta = jspm.meta;\r\n            }\r\n\r\n            // Pass on options to client\r\n            client.jspm.useBundles = jspm.useBundles;\r\n            client.jspm.stripExtension = jspm.stripExtension;\r\n\r\n            let baseURL = jspm.baseURL;\r\n            client.jspm.baseURL = baseURL || '';\r\n\r\n            console.log('base URL:', chalk.cyan(baseURL));\r\n            let fileBasePath = ctx.toUrl(resetBase ? ctx.getDist() : path.join(basePath, baseURL));\r\n            console.log('fileBasePath', fileBasePath);\r\n\r\n            let packagesPath = ctx.toUrl(jspm.packages);\r\n            let browserPath = ctx.toUrl(ctx.toRootPath(ctx.toStr(jspm.browser || '')));\r\n            let configPaths: string[] = Array.isArray(jspm.config) ? <string[]>jspm.config : [<string>jspm.config];\r\n            // Add SystemJS loader and jspm config\r\n\r\n\r\n            Array.prototype.unshift.apply(files,\r\n                configPaths.map((configPath) => {\r\n                    return createPattern(configPath)\r\n                })\r\n            );\r\n\r\n            // Needed for JSPM 0.17 beta\r\n            if (jspm.browser) {\r\n                files.unshift(createPattern(browserPath));\r\n            }\r\n\r\n            files.unshift(createPattern(adapterfile));\r\n            let sysjs = karmajspm.systemjs ? ctx.toSrc(karmajspm.systemjs) : ['system-polyfills.src', 'system.src'];\r\n            _.each(_.isArray(sysjs) ? sysjs : [sysjs], sf => {\r\n                files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, sf))));\r\n            });\r\n\r\n            function addExpandedFiles() {\r\n                client.jspm.expandedFiles = _.flatten(_.map(jspm.loadFiles, file => {\r\n                    let flname = path.join(fileBasePath, _.isString(file) ? file : file.pattern);\r\n                    files.push(createServedPattern(ctx.toUrl(flname), _.isString(file) ? null : file));\r\n                    return _.map(glob.sync(flname), (fm: string) => ctx.toUrl(fileBasePath, fm));\r\n                }));\r\n\r\n                console.log('expandedFiles:', client.jspm.expandedFiles);\r\n            }\r\n            addExpandedFiles();\r\n\r\n            emitter.on('file_list_modified', addExpandedFiles);\r\n\r\n            // Add served files to files array\r\n            _.each(jspm.serveFiles, file => {\r\n                files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern))));\r\n            });\r\n\r\n            // Allow Karma to serve all files within jspm_packages.\r\n            // This allows jspm/SystemJS to load them\r\n            var jspmPattern = createServedPattern(\r\n                ctx.toUrl(path.join(packagesPath, '!(system-polyfills.src.js|system.src.js)/**')), { nocache: jspm.cachePackages !== true }\r\n            );\r\n            jspmPattern.watched = false;\r\n            files.push(jspmPattern);\r\n\r\n            console.log('------------------------complete jspm pattern:\\n', files);\r\n        };\r\n        initJspm.$inject = ['config.files', 'config.basePath', 'config.jspm', 'config.client', 'emitter'];\r\n\r\n        cfg.frameworks.unshift('jspmdev');\r\n        cfg.plugins.unshift({\r\n            'framework:jspmdev': ['factory', initJspm]\r\n        });\r\n\r\n        return cfg;\r\n    }\r\n\r\n\r\n    getDefaultAdapter() {\r\n        return {\r\n            name: 'adapter',\r\n            template: `\r\n(function(karma, System) {\r\n    if (!System) {\r\n        throw new Error('SystemJS was not found. Please make sure you have ' +\r\n            'initialized jspm via installing a dependency with jspm, ' +\r\n            'or by running \"jspm dl-loader\".');\r\n    }\r\n\r\n\r\n    System.config({ baseURL: karma.config.jspm.baseURL?  'base/'+ karma.config.jspm.baseURL : 'base' });\r\n    \r\n\r\n    var stripExtension = typeof karma.config.jspm.stripExtension === 'boolean' ? karma.config.jspm.stripExtension : true;\r\n\r\n    // Prevent immediately starting tests.\r\n    karma.loaded = function() {\r\n\r\n        if (karma.config.jspm.paths !== undefined &&\r\n            typeof karma.config.jspm.paths === 'object') {\r\n\r\n            System.config({\r\n                paths: karma.config.jspm.paths\r\n            });\r\n        }\r\n\r\n        if (karma.config.jspm.meta !== undefined &&\r\n            typeof karma.config.jspm.meta === 'object') {\r\n            System.config({\r\n                meta: karma.config.jspm.meta\r\n            });\r\n        }\r\n\r\n        // Exclude bundle configurations if useBundles option is not specified\r\n        if (!karma.config.jspm.useBundles) {\r\n            System.bundles = [];\r\n        }\r\n\r\n        // Load everything specified in loadFiles in the specified order\r\n        var promiseChain = Promise.resolve();\r\n        for (var i = 0; i < karma.config.jspm.expandedFiles.length; i++) {\r\n            promiseChain = promiseChain.then((function(moduleName) {\r\n                return function() {\r\n                    return System['import'](moduleName);\r\n                };\r\n            })(extractModuleName(karma.config.jspm.expandedFiles[i])));\r\n        }\r\n\r\n        promiseChain.then(function() {\r\n            karma.start();\r\n        }, function(e) {\r\n            karma.error(e.name + ': ' + e.message);\r\n        });\r\n    };\r\n\r\n    function extractModuleName(fileName) {\r\n        if (stripExtension) {\r\n            return fileName.replace(/\\.js$/, '');\r\n        }\r\n        return fileName;\r\n    }\r\n})(window.__karma__, window.System);`\r\n        };\r\n    }\r\n\r\n\r\n    checkAdapter(karmajspm: KarmaJspmOption, ctx: ITaskContext): string {\r\n\r\n        let templ = karmajspm.karmaloader;\r\n        let defaultTempl = this.getDefaultAdapter();\r\n        if (!templ) {\r\n            templ = defaultTempl;\r\n        } else {\r\n            if (templ.name === defaultTempl.name) {\r\n                console.log(chalk.red('can not rewrite default adapter named: \"adapter\".'));\r\n                templ = defaultTempl;\r\n            }\r\n        }\r\n\r\n        let adapterfile = path.join(__dirname, './adapters', templ.name);\r\n        if (!/.js$/.test(adapterfile)) {\r\n            adapterfile = adapterfile + '.js';\r\n        }\r\n        mkdirp.sync(path.dirname(adapterfile));\r\n        if (!fs.existsSync(adapterfile)) {\r\n            fs.writeFileSync(adapterfile, templ.template, 'utf8')\r\n        }\r\n\r\n        return adapterfile;\r\n    }\r\n}\r\n\r\nfunction getPackageFilePath(packagesPath: string, fileName: string): string {\r\n    let fm = path.join(packagesPath, fileName + '@*.js');\r\n    var exists = glob.sync(fm);\r\n    if (exists && exists.length !== 0) {\r\n        return fm;\r\n    } else {\r\n        return path.join(packagesPath, fileName + '.js');\r\n    }\r\n}\r\n\r\nconst createPattern = function (path: string) {\r\n    return { pattern: path, included: true, served: true, watched: false };\r\n};\r\n\r\nconst createServedPattern = function (pathstr: string, file?) {\r\n    return {\r\n        pattern: pathstr,\r\n        included: file && 'included' in file ? file.included : false,\r\n        served: file && 'served' in file ? file.served : true,\r\n        nocache: file && 'nocache' in file ? file.nocache : false,\r\n        watched: file && 'watched' in file ? file.watched : true\r\n    };\r\n};\r\n"]}