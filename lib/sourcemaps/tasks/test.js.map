{"version":3,"sources":["tasks/test.js"],"names":["expandGlob","file","cwd","glob","sync","pattern","getPackageFilePath","packagesPath","fileName","exists","length","__decorate","decorators","target","key","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","chalk","require","development_core_1","karma","path","KarmaTest","info","_classCallCheck","this","fs","name","mkdirp","_this","tkn","ctx","subTaskName","getInfo","gulp","task","callback","karmaConfigFile","option","join","env","root","toRootPath","cfg","karmaConfig","extend","singleRun","release","deploy","watch","configFile","karmaBasePath","basePath","toStr","isUndefined","getDist","files","config","initkarmaJspmPlugin","code","cyan","console","log","set","serve","start","karmajspm","isFunction","checkAdapter","baseURL","client","fileBasePath","jspm","toUrl","isString","dist","toDistPath","relative","toSrc","pkg","map","it","getPackage","adapterfile","initJspm","loadFiles","concat","serveFiles","packages","directories","cachePackages","undefined","paths","meta","stripExtension","browser","configPaths","Array","isArray","unshift","configPath","createPattern","useBundles","addExpandedFiles","emitter","prototype","push","browserPath","nocache","jspmPattern","watched","$inject","plugins","frameworks","toLowerCase","reporters","packname","browsers","createServedPattern","splice","indexOf","framework:jspm","dependencies","template","getDefaultAdapter","templ","defaultTempl","__dirname","pathstr","included","dirname","writeFileSync","order","value","runWay","RunWay","parallel","oper","Operation","default","test","exports","served"],"mappings":"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","file":"../../tasks/test.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst chalk = require('chalk');\n// import * as path from 'path';\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst karma = require('karma');\nconst fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\nconst mkdirp = require('mkdirp');\nlet KarmaTest = class KarmaTest {\n    constructor(info) {\n        this.info = info;\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'web-test';\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let option = ctx.option;\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback) => {\n            let karmaConfigFile = option.karmaConfigFile || path.join(ctx.env.root, './karma.conf.js');\n            karmaConfigFile = ctx.toRootPath(karmaConfigFile);\n            let cfg = null;\n            if (option.karmaConfig) {\n                cfg = option.karmaConfig(ctx);\n            }\n            cfg = _.extend(cfg || { singleRun: ctx.env.release || ctx.env.deploy || ctx.env.watch !== true }, {\n                configFile: karmaConfigFile\n            });\n            if (option.karmaBasePath) {\n                cfg.basePath = ctx.toStr(option.karmaBasePath);\n            }\n            else if (_.isUndefined(cfg.basePath)) {\n                cfg.basePath = ctx.getDist();\n            }\n            cfg.basePath = ctx.toRootPath(cfg.basePath);\n            if (option.karmajspm) {\n                cfg.files = cfg.files || [];\n                require(karmaConfigFile)({\n                    set(config) {\n                        cfg = _.extend(cfg, config);\n                    }\n                });\n                cfg = this.initkarmaJspmPlugin(cfg, ctx);\n            }\n            let serve = new karma.Server(cfg, (code) => {\n                if (code === 1) {\n                    console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(code));\n                    callback('Unit Test failures, exiting process');\n                }\n                else {\n                    console.log('Unit Tests passed', ', code:', chalk.cyan(code));\n                    callback();\n                }\n            });\n            if (option.karmajspm) {\n                serve.on('file_list_modified', () => {\n                });\n            }\n            serve.start();\n        });\n        return tkn;\n    }\n    initkarmaJspmPlugin(cfg, ctx) {\n        let option = ctx.option;\n        let pkg = ctx.getPackage();\n        let karmajspm = _.isFunction(option.karmajspm) ? option.karmajspm(ctx) : option.karmajspm;\n        let adapterfile = ctx.toUrl(this.checkAdapter(karmajspm, ctx));\n        let initJspm = (files, basePath, jspm, client, emitter) => {\n            let dist = ctx.getDist();\n            basePath = ctx.toDistPath(path.relative(dist, basePath));\n            console.log('--------------------init karma jspm---------------------\\n', 'base path:', chalk.cyan(basePath));\n            jspm = jspm || {};\n            if (karmajspm.config) {\n                jspm.config = ctx.toSrc(karmajspm.config);\n            }\n            if (!jspm.config && pkg.jspm) {\n                jspm.config = ctx.toRootPath(pkg.jspm.configFile);\n            }\n            else {\n                jspm.config = _.isString(jspm.config) ? path.join(basePath, jspm.config) : _.map(jspm.config, it => path.join(it, it));\n            }\n            jspm.config = _.isString(jspm.config) ? ctx.toUrl(jspm.config) : _.map(jspm.config, it => ctx.toUrl(it));\n            jspm.loadFiles = jspm.loadFiles || [];\n            jspm.serveFiles = jspm.serveFiles || [];\n            if (karmajspm.loadFiles) {\n                jspm.loadFiles.concat(_.isFunction(karmajspm.loadFiles) ? karmajspm.loadFiles(ctx) : karmajspm.loadFiles);\n            }\n            if (karmajspm.serveFiles) {\n                jspm.serveFiles.concat(_.isFunction(karmajspm.serveFiles) ? karmajspm.serveFiles(ctx) : karmajspm.serveFiles);\n            }\n            if (karmajspm.packages) {\n                jspm.packages = ctx.toStr(jspm.packages || karmajspm.packages);\n            }\n            if (!jspm.packages && pkg.jspm && pkg.jspm.directories) {\n                jspm.packages = ctx.toRootPath(pkg.jspm.directories.packages);\n            }\n            else {\n                jspm.packages = path.join(basePath, jspm.packages);\n            }\n            jspm.cachePackages = _.isUndefined(karmajspm.cachePackages) ? jspm.cachePackages : jspm.cachePackages;\n            client.jspm = client.jspm || {};\n            if (jspm.paths !== undefined && typeof jspm.paths === 'object') {\n                client.jspm.paths = jspm.paths;\n            }\n            if (jspm.meta !== undefined && typeof jspm.meta === 'object') {\n                client.jspm.meta = jspm.meta;\n            }\n            // Pass on options to client\n            client.jspm.useBundles = _.isUndefined(karmajspm.useBundles) ? jspm.useBundles : karmajspm.useBundles;\n            client.jspm.stripExtension = _.isUndefined(karmajspm.stripExtension) ? jspm.stripExtension : karmajspm.stripExtension;\n            let baseURL = ctx.toStr(karmajspm.baseURL || jspm.baseURL);\n            let fileBasePath = ctx.toUrl(path.join(basePath, baseURL));\n            client.jspm.baseURL = fileBasePath;\n            console.log('fileBasePath', fileBasePath);\n            console.log('base URL:', chalk.cyan(fileBasePath));\n            let packagesPath = ctx.toUrl(jspm.packages);\n            let browserPath = ctx.toUrl(ctx.toRootPath(ctx.toStr(karmajspm.browser || jspm.browser || '')));\n            let configPaths = Array.isArray(jspm.config) ? jspm.config : [jspm.config];\n            // Add SystemJS loader and jspm config\n            Array.prototype.unshift.apply(files, configPaths.map((configPath) => {\n                return createPattern(configPath);\n            }));\n            // Needed for JSPM 0.17 beta\n            if (jspm.browser) {\n                files.unshift(createPattern(browserPath));\n            }\n            files.unshift(createPattern(adapterfile));\n            files.unshift(createPattern(getPackageFilePath(packagesPath, 'system-polyfills.src')));\n            files.unshift(createPattern(getPackageFilePath(packagesPath, 'system.src')));\n            function addExpandedFiles() {\n                client.jspm.expandedFiles = _.flatten(_.map(jspm.loadFiles, file => {\n                    files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern)), _.isString(file) ? null : file));\n                    return expandGlob(file, basePath);\n                }));\n            }\n            addExpandedFiles();\n            emitter.on('file_list_modified', addExpandedFiles);\n            // Add served files to files array\n            _.each(jspm.serveFiles, file => {\n                files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern))));\n            });\n            // Allow Karma to serve all files within jspm_packages.\n            // This allows jspm/SystemJS to load them\n            var jspmPattern = createServedPattern(packagesPath + '!(system-polyfills.src.js|system.src.js)/**', { nocache: jspm.cachePackages !== true });\n            jspmPattern.watched = false;\n            files.push(jspmPattern);\n            console.log('------------------------complete jspm pattern:\\n', files);\n        };\n        initJspm.$inject = ['config.files', 'config.basePath', 'config.jspm', 'config.client', 'emitter'];\n        cfg.plugins = cfg.plugins || [];\n        cfg.frameworks = cfg.frameworks || [];\n        // clean.\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.frameworks, it => 'karma-' + it.toLowerCase()));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.reporters, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-reporter';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.browsers, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-launcher';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = _.uniq(cfg.plugins);\n        if (cfg.frameworks.indexOf('jspm') > 0) {\n            cfg.frameworks.splice(cfg.frameworks.indexOf('jspm'), 1);\n        }\n        cfg.frameworks.unshift('jspm');\n        if (cfg.plugins.indexOf('karma-jspm') > 0) {\n            cfg.plugins.splice(cfg.plugins.indexOf('karma-jspm'), 1);\n        }\n        cfg.plugins.unshift({\n            'framework:jspm': ['factory', initJspm]\n        });\n        return cfg;\n    }\n    getDefaultAdapter() {\n        return {\n            name: 'adapter',\n            template: `\r\n(function(karma, System) {\r\n    if (!System) {\r\n        throw new Error('SystemJS was not found. Please make sure you have ' +\r\n            'initialized jspm via installing a dependency with jspm, ' +\r\n            'or by running \"jspm dl-loader\".');\r\n    }\r\n\r\n    System.config({ baseURL: karma.config.jspm.baseURL || './' });\r\n\r\n    var stripExtension = typeof karma.config.jspm.stripExtension === 'boolean' ? karma.config.jspm.stripExtension : true;\r\n\r\n    // Prevent immediately starting tests.\r\n    karma.loaded = function() {\r\n\r\n        if (karma.config.jspm.paths !== undefined &&\r\n            typeof karma.config.jspm.paths === 'object') {\r\n\r\n            System.config({\r\n                paths: karma.config.jspm.paths\r\n            });\r\n        }\r\n\r\n        if (karma.config.jspm.meta !== undefined &&\r\n            typeof karma.config.jspm.meta === 'object') {\r\n            System.config({\r\n                meta: karma.config.jspm.meta\r\n            });\r\n        }\r\n\r\n        // Exclude bundle configurations if useBundles option is not specified\r\n        if (!karma.config.jspm.useBundles) {\r\n            System.bundles = [];\r\n        }\r\n\r\n        // Load everything specified in loadFiles in the specified order\r\n        var promiseChain = Promise.resolve();\r\n        for (var i = 0; i < karma.config.jspm.expandedFiles.length; i++) {\r\n            promiseChain = promiseChain.then((function(moduleName) {\r\n                return function() {\r\n                    return System['import'](moduleName);\r\n                };\r\n            })(extractModuleName(karma.config.jspm.expandedFiles[i])));\r\n        }\r\n\r\n        promiseChain.then(function() {\r\n            karma.start();\r\n        }, function(e) {\r\n            karma.error(e.name + ': ' + e.message);\r\n        });\r\n    };\r\n\r\n    function extractModuleName(fileName) {\r\n        if (stripExtension) {\r\n            return fileName.replace(/\\.js$/, '');\r\n        }\r\n        return fileName;\r\n    }\r\n})(window.__karma__, window.System);`\n        };\n    }\n    checkAdapter(karmajspm, ctx) {\n        let templ = karmajspm.karmaloader;\n        let defaultTempl = this.getDefaultAdapter();\n        if (!templ) {\n            templ = defaultTempl;\n        }\n        else {\n            if (templ.name === defaultTempl.name) {\n                console.log(chalk.red('can not rewrite default adapter named: \"adapter\".'));\n                templ = defaultTempl;\n            }\n        }\n        let adapterfile = path.join(__dirname, './adapters', templ.name);\n        if (!/.js$/.test(adapterfile)) {\n            adapterfile = adapterfile + '.js';\n        }\n        mkdirp.sync(path.dirname(adapterfile));\n        if (!fs.existsSync(adapterfile)) {\n            fs.writeFileSync(adapterfile, templ.template, 'utf8');\n        }\n        return adapterfile;\n    }\n};\nKarmaTest = __decorate([\n    development_core_1.task({\n        order: { value: 0.25, runWay: development_core_1.RunWay.parallel },\n        oper: development_core_1.Operation.default | development_core_1.Operation.test\n    }), \n    __metadata('design:paramtypes', [Object])\n], KarmaTest);\nexports.KarmaTest = KarmaTest;\nfunction expandGlob(file, cwd) {\n    return glob.sync(file.pattern || file, { cwd: cwd });\n}\nfunction getPackageFilePath(packagesPath, fileName) {\n    var exists = glob.sync(packagesPath + fileName + '@*.js');\n    if (exists && exists.length !== 0) {\n        return packagesPath + fileName + '@*.js';\n    }\n    else {\n        return packagesPath + fileName + '.js';\n    }\n}\nconst createPattern = function (path) {\n    return { pattern: path, included: true, served: true, watched: false };\n};\nconst createServedPattern = function (pathstr, file) {\n    return {\n        pattern: pathstr,\n        included: file && 'included' in file ? file.included : false,\n        served: file && 'served' in file ? file.served : true,\n        nocache: file && 'nocache' in file ? file.nocache : false,\n        watched: file && 'watched' in file ? file.watched : true\n    };\n};\n"]}