{"version":3,"sources":["tasks/test.ts"],"names":["getPackageFilePath","packagesPath","fileName","fm","path","join","exists","glob","sync","length","_","require","chalk","development_core_1","karma","fs","mkdirp","url","KarmaTest","info","this","prototype","getInfo","name","setup","ctx","gulp","_this","option","tkn","subTaskName","task","callback","karmaConfigFile","configFile","env","root","toRootPath","cfg","set","config","extend","singleRun","release","deploy","watch","basePath","toStr","isUndefined","getDist","jspm","files","initkarmaJspmPlugin","serve","Server","code","console","log","red","cyan","start","getRelativePaths","rootpath","prefix","paths","bundleDest","dir","readdirSync","each","d","sf","f","lstatSync","isDirectory","p_1","toUrl","p","karmajspm","pkg","getPackage","isFunction","isBoolean","jspmcfg","adapterfile","checkAdapter","packages","directories","toDistSrc","toSrc","isString","map","it","baseURL","cachePackages","relpkg","resetBase","test","root_1","getRootPath","rlpk","jspmpk","basename","res","to","resource","relpth_1","proxies","r","push","pattern","toDistPath","included","abr","resolve","loadFiles","serveFiles","concat","plugins","filter","frameworks","toLowerCase","reporters","packname","dependencies","devDependencies","browsers","uniq","initJspm","client","emitter","addExpandedFiles","expandedFiles","flatten","file","flname","fileBasePath","createServedPattern","undefined","meta","useBundles","stripExtension","browserPath","browser","configPaths","Array","isArray","unshift","apply","configPath","createPattern","sysjs","systemjs","on","jspmPattern","nocache","watched","$inject","framework:jspmdev","getDefaultAdapter","template","templ","karmaloader","defaultTempl","__dirname","dirname","existsSync","writeFileSync","__decorate","order","total","value","runWay","RunWay","parallel","oper","Operation","default","exports","served","pathstr"],"mappings":"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","file":"../../tasks/test.js","sourcesContent":["import * as _ from 'lodash';\nimport * as chalk from 'chalk';\nimport { TaskCallback, Gulp } from 'gulp';\n// import * as path from 'path';\nimport { Src, ITask, ITaskInfo, Operation, task, ITaskContext, RunWay } from 'development-core';\n// import * as chalk from 'chalk';\nimport * as karma from 'karma';\nimport * as fs from 'fs';\nimport * as path from 'path';\nconst glob = require('glob');\nconst mkdirp = require('mkdirp');\nimport * as url from 'url';\n// import * as mocha from 'gulp-mocha';\nimport { IWebTaskOption, KarmaJspmOption, KarmaJspm } from '../WebTaskOption';\n\n@task({\n    order: total => { return { value: 2 / total, runWay: RunWay.parallel } },\n    oper: Operation.default | Operation.test\n})\nexport class KarmaTest implements ITask {\n    constructor(private info: ITaskInfo) {\n    }\n    getInfo() {\n        this.info.name = this.info.name || 'web-test';\n        return this.info;\n    }\n    setup(ctx: ITaskContext, gulp: Gulp) {\n        let option = (<IWebTaskOption>ctx.option).karma || {};\n\n        let tkn = ctx.subTaskName(this.getInfo());\n        gulp.task(tkn, (callback: TaskCallback) => {\n            let karmaConfigFile = option.configFile || path.join(ctx.env.root, './karma.conf.js');\n            karmaConfigFile = ctx.toRootPath(karmaConfigFile);\n            let cfg: karma.ConfigOptions = {};\n            // get config.\n            require(karmaConfigFile)({\n                set(config) {\n                    cfg = _.extend(cfg, config);\n                }\n            });\n            if (option.config) {\n                cfg = option.config(ctx);\n            }\n\n            cfg = <karma.ConfigOptions>_.extend(cfg, { singleRun: ctx.env.release || ctx.env.deploy || ctx.env.watch !== true });\n            if (option.basePath) {\n                cfg.basePath = ctx.toStr(option.basePath);\n            } else if (_.isUndefined(cfg.basePath)) {\n                cfg.basePath = ctx.getDist();\n            }\n\n            cfg.basePath = ctx.toRootPath(cfg.basePath);\n\n            if (option.jspm) {\n                cfg.files = cfg.files || [];\n                cfg = this.initkarmaJspmPlugin(cfg, ctx);\n            }\n\n            let serve = new karma.Server(\n                cfg,\n                (code: number) => {\n                    if (code === 1) {\n                        console.log(chalk.red('Unit Test failures, exiting process'), ', code:', chalk.cyan(<any>code));\n                        callback(<any>'Unit Test failures, exiting process');\n                    } else {\n                        console.log('Unit Tests passed', ', code:', chalk.cyan(<any>code));\n                        callback();\n                    }\n                });\n\n            serve.start();\n        });\n\n        return tkn;\n    }\n\n    getRelativePaths(ctx: ITaskContext, rootpath: string, prefix = '') {\n        let paths: any = {};\n        let bundleDest = ctx.getDist();\n        let dir = fs.readdirSync(bundleDest);\n        _.each(dir, (d: string) => {\n\n            let sf = path.join(bundleDest, d);\n            let f = fs.lstatSync(sf);\n            if (f.isDirectory()) {\n                let p = '/' + d + '/*';\n                paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\n            }\n        });\n        let p = '*'\n        paths[p] = prefix + ctx.toUrl(rootpath, path.join(bundleDest, p));\n        // let jpk = <string>option.jspmPackages;\n        // let jp = path.basename(jpk) + '/*';\n        // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\n\n        return paths;\n    }\n\n\n    initkarmaJspmPlugin(cfg: karma.ConfigOptions, ctx: ITaskContext): karma.ConfigOptions {\n        let option = (<IWebTaskOption>ctx.option).karma || {};\n        let pkg = ctx.getPackage();\n\n        let karmajspm: KarmaJspmOption;\n        if (_.isFunction(option.jspm)) {\n            karmajspm = option.jspm(ctx);\n        } else if (_.isBoolean(karma)) {\n            karmajspm = {};\n        } else {\n            karmajspm = option.jspm;\n        }\n        let jspmcfg: KarmaJspm = cfg['jspm'] || {};\n\n        let adapterfile = ctx.toUrl(this.checkAdapter(karmajspm, ctx));\n\n        if (karmajspm.packages) {\n            jspmcfg.packages = ctx.toRootPath(ctx.toStr(karmajspm.packages));\n        } else {\n            if (!jspmcfg.packages && pkg.jspm && pkg.jspm.directories) {\n                jspmcfg.packages = ctx.toRootPath(pkg.jspm.directories.packages);\n            } else if (jspmcfg.packages) {\n                jspmcfg.packages = ctx.toRootPath(jspmcfg.packages);\n            }\n        }\n        if (karmajspm.config) {\n            jspmcfg.config = ctx.toDistSrc(ctx.toSrc(karmajspm.config));\n        } else {\n            if (!jspmcfg.config && pkg.jspm) {\n                jspmcfg.config = ctx.toRootPath(pkg.jspm.configFile);\n            } else if (jspmcfg.config) {\n                jspmcfg.config = ctx.toDistSrc(jspmcfg.config);\n            }\n        }\n\n        jspmcfg.config = _.isString(jspmcfg.config) ? ctx.toUrl(jspmcfg.config) : _.map(jspmcfg.config, it => ctx.toUrl(it));\n\n        jspmcfg.baseURL = ctx.toStr(karmajspm.baseURL || jspmcfg.baseURL || '');\n        if (!_.isUndefined(karmajspm.cachePackages)) {\n            jspmcfg.cachePackages = karmajspm.cachePackages;\n        }\n\n        let relpkg = ctx.toUrl(cfg.basePath, jspmcfg.packages);\n        let resetBase = false;\n        if (/^\\.\\./.test(relpkg)) {\n            resetBase = true;\n            let root = cfg.basePath = ctx.getRootPath();\n            jspmcfg.paths = this.getRelativePaths(ctx, cfg.basePath); // , 'base/');\n            let rlpk = ctx.toUrl(root, jspmcfg.packages) + '/*';\n            let jspmpk = path.basename(jspmcfg.packages) + '/*';\n            jspmcfg.paths['/' + jspmpk] = 'base/' + rlpk;\n\n\n            let res: Src = ctx.to(karmajspm.resource) || ['public', 'asserts'];\n            let relpth = ctx.toUrl(root, ctx.getDist());\n            cfg.proxies = cfg.proxies || {};\n            cfg.files = cfg.files || [];\n            _.each(_.isString(res) ? [res] : res, r => {\n                cfg.files.push({ pattern: ctx.toUrl(root, ctx.toDistPath(r)) + '/**', included: false });\n\n                let abr = /^\\//.test(r) ? ('base' + r) : ('base/' + r);\n                cfg.proxies[abr] = url.resolve(relpth, r);\n            });\n\n            // jspmcfg.paths = jspmcfg.paths || {};\n            // jspmcfg.baseURL = ctx.toUrl(root, ctx.getDist());\n            // let rlpk = ctx.toUrl(root, jspmcfg.packages) + '/*';\n            // jspmcfg.paths[rlpk] = '/base/' + rlpk;\n            console.log('paths: ', jspmcfg.paths);\n\n            cfg.proxies = _.extend(cfg.proxies, jspmcfg.paths);\n            cfg.proxies[path.basename(jspmcfg.packages)] = ctx.toUrl(root, jspmcfg.packages);\n            console.log('proxies: ', cfg.proxies);\n        }\n\n        jspmcfg.loadFiles = jspmcfg.loadFiles || [];\n        jspmcfg.serveFiles = jspmcfg.serveFiles || [];\n\n        if (karmajspm.loadFiles) {\n            jspmcfg.loadFiles = jspmcfg.loadFiles.concat(_.isFunction(karmajspm.loadFiles) ? karmajspm.loadFiles(ctx) : karmajspm.loadFiles);\n        }\n        if (karmajspm.serveFiles) {\n            jspmcfg.serveFiles = jspmcfg.serveFiles.concat(_.isFunction(karmajspm.serveFiles) ? karmajspm.serveFiles(ctx) : karmajspm.serveFiles);\n        }\n\n        cfg.plugins = _.filter(cfg.plugins || [], it => it !== 'karma-jspm');\n        cfg.frameworks = _.filter(cfg.frameworks || [], it => it !== 'jspm');\n        // clean.\n\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.frameworks, it => 'karma-' + it.toLowerCase()));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.reporters, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-reporter'\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = cfg.plugins.concat(_.map(cfg.browsers, it => {\n            let packname = 'karma-' + it.toLowerCase() + '-launcher';\n            if (pkg.dependencies[packname] || pkg.devDependencies[packname]) {\n                return packname;\n            }\n            return 'karma-' + it;\n        }));\n        cfg.plugins = _.uniq(cfg.plugins);\n\n\n\n        let initJspm: any = (files: (karma.FilePattern | string)[], basePath: string, jspm: KarmaJspm, client, emitter) => {\n            console.log('--------------------init karma jspm---------------------\\n', 'base path:', chalk.cyan(basePath));\n            jspm = jspm || {}\n\n            jspm = _.extend(jspm || {}, jspmcfg);\n\n            client.jspm = client.jspm || {};\n            if (jspm.paths !== undefined && typeof jspm.paths === 'object') {\n                client.jspm.paths = jspm.paths;\n            }\n            if (jspm.meta !== undefined && typeof jspm.meta === 'object') {\n                client.jspm.meta = jspm.meta;\n            }\n            // Pass on options to client\n            client.jspm.useBundles = jspm.useBundles;\n            client.jspm.stripExtension = jspm.stripExtension;\n\n            let baseURL = jspm.baseURL;\n            client.jspm.baseURL = baseURL || '';\n\n            console.log('base URL:', chalk.cyan(baseURL));\n            let fileBasePath = ctx.toUrl(resetBase ? ctx.getDist() : path.join(basePath, baseURL));\n            console.log('fileBasePath', fileBasePath);\n\n            let packagesPath = ctx.toUrl(jspm.packages);\n            let browserPath = ctx.toUrl(ctx.toRootPath(ctx.toStr(jspm.browser || '')));\n            let configPaths: string[] = Array.isArray(jspm.config) ? <string[]>jspm.config : [<string>jspm.config];\n            // Add SystemJS loader and jspm config\n\n\n            Array.prototype.unshift.apply(files,\n                configPaths.map((configPath) => {\n                    return createPattern(configPath)\n                })\n            );\n\n            // Needed for JSPM 0.17 beta\n            if (jspm.browser) {\n                files.unshift(createPattern(browserPath));\n            }\n\n            files.unshift(createPattern(adapterfile));\n            let sysjs = karmajspm.systemjs ? ctx.toSrc(karmajspm.systemjs) : ['system-polyfills.src', 'system.src'];\n            _.each(_.isArray(sysjs) ? sysjs : [sysjs], sf => {\n                files.unshift(createPattern(ctx.toUrl(getPackageFilePath(packagesPath, sf))));\n            });\n\n            function addExpandedFiles() {\n                client.jspm.expandedFiles = _.flatten(_.map(jspm.loadFiles, file => {\n                    let flname = path.join(fileBasePath, _.isString(file) ? file : file.pattern);\n                    files.push(createServedPattern(ctx.toUrl(flname), _.isString(file) ? null : file));\n                    return _.map(glob.sync(flname), (fm: string) => ctx.toUrl(fileBasePath, fm));\n                }));\n\n                console.log('expandedFiles:', client.jspm.expandedFiles);\n            }\n            addExpandedFiles();\n\n            emitter.on('file_list_modified', addExpandedFiles);\n\n            // Add served files to files array\n            _.each(jspm.serveFiles, file => {\n                files.push(createServedPattern(ctx.toUrl(path.join(fileBasePath, _.isString(file) ? file : file.pattern))));\n            });\n\n            // Allow Karma to serve all files within jspm_packages.\n            // This allows jspm/SystemJS to load them\n            var jspmPattern = createServedPattern(\n                ctx.toUrl(path.join(packagesPath, '!(system-polyfills.src.js|system.src.js)/**')), { nocache: jspm.cachePackages !== true }\n            );\n            jspmPattern.watched = false;\n            files.push(jspmPattern);\n\n            console.log('------------------------complete jspm pattern:\\n', files);\n        };\n        initJspm.$inject = ['config.files', 'config.basePath', 'config.jspm', 'config.client', 'emitter'];\n\n        cfg.frameworks.unshift('jspmdev');\n        cfg.plugins.unshift({\n            'framework:jspmdev': ['factory', initJspm]\n        });\n\n        return cfg;\n    }\n\n\n    getDefaultAdapter() {\n        return {\n            name: 'adapter',\n            template: `\n(function(karma, System) {\n    if (!System) {\n        throw new Error('SystemJS was not found. Please make sure you have ' +\n            'initialized jspm via installing a dependency with jspm, ' +\n            'or by running \"jspm dl-loader\".');\n    }\n\n\n    System.config({ baseURL: karma.config.jspm.baseURL?  'base/'+ karma.config.jspm.baseURL : 'base' });\n    \n\n    var stripExtension = typeof karma.config.jspm.stripExtension === 'boolean' ? karma.config.jspm.stripExtension : true;\n\n    // Prevent immediately starting tests.\n    karma.loaded = function() {\n\n        if (karma.config.jspm.paths !== undefined &&\n            typeof karma.config.jspm.paths === 'object') {\n\n            System.config({\n                paths: karma.config.jspm.paths\n            });\n        }\n\n        if (karma.config.jspm.meta !== undefined &&\n            typeof karma.config.jspm.meta === 'object') {\n            System.config({\n                meta: karma.config.jspm.meta\n            });\n        }\n\n        // Exclude bundle configurations if useBundles option is not specified\n        if (!karma.config.jspm.useBundles) {\n            System.bundles = [];\n        }\n\n        // Load everything specified in loadFiles in the specified order\n        var promiseChain = Promise.resolve();\n        for (var i = 0; i < karma.config.jspm.expandedFiles.length; i++) {\n            promiseChain = promiseChain.then((function(moduleName) {\n                return function() {\n                    return System['import'](moduleName);\n                };\n            })(extractModuleName(karma.config.jspm.expandedFiles[i])));\n        }\n\n        promiseChain.then(function() {\n            karma.start();\n        }, function(e) {\n            karma.error(e.name + ': ' + e.message);\n        });\n    };\n\n    function extractModuleName(fileName) {\n        if (stripExtension) {\n            return fileName.replace(/\\.js$/, '');\n        }\n        return fileName;\n    }\n})(window.__karma__, window.System);`\n        };\n    }\n\n\n    checkAdapter(karmajspm: KarmaJspmOption, ctx: ITaskContext): string {\n\n        let templ = karmajspm.karmaloader;\n        let defaultTempl = this.getDefaultAdapter();\n        if (!templ) {\n            templ = defaultTempl;\n        } else {\n            if (templ.name === defaultTempl.name) {\n                console.log(chalk.red('can not rewrite default adapter named: \"adapter\".'));\n                templ = defaultTempl;\n            }\n        }\n\n        let adapterfile = path.join(__dirname, './adapters', templ.name);\n        if (!/.js$/.test(adapterfile)) {\n            adapterfile = adapterfile + '.js';\n        }\n        mkdirp.sync(path.dirname(adapterfile));\n        if (!fs.existsSync(adapterfile)) {\n            fs.writeFileSync(adapterfile, templ.template, 'utf8')\n        }\n\n        return adapterfile;\n    }\n}\n\nfunction getPackageFilePath(packagesPath: string, fileName: string): string {\n    let fm = path.join(packagesPath, fileName + '@*.js');\n    var exists = glob.sync(fm);\n    if (exists && exists.length !== 0) {\n        return fm;\n    } else {\n        return path.join(packagesPath, fileName + '.js');\n    }\n}\n\nconst createPattern = function (path: string) {\n    return { pattern: path, included: true, served: true, watched: false };\n};\n\nconst createServedPattern = function (pathstr: string, file?) {\n    return {\n        pattern: pathstr,\n        included: file && 'included' in file ? file.included : false,\n        served: file && 'served' in file ? file.served : true,\n        nocache: file && 'nocache' in file ? file.nocache : false,\n        watched: file && 'watched' in file ? file.watched : true\n    };\n};\n"]}