{"version":3,"sources":["index.js","index.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","require","development_core_1","webTasks","Define","_classCallCheck","this","_createClass","value","option","env","asserts","extend","ts","js","config","findTasks","then","tasks","serve","group","serTasks","concat","taskdefine","exports"],"mappings":"AAAA,+kBACIA,WAA0C,SAAUC,EAAYC,EAAQC,EAAKC,GAC7E,GAA2HC,GAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,CACrH,IAAuB,YAAnB,mBAAOQ,SAAP,YAAAC,QAAOD,WAAoD,kBAArBA,SAAQE,SAAyBL,EAAIG,QAAQE,SAASb,EAAYC,EAAQC,EAAKC,OACpH,KAAK,GAAIW,GAAId,EAAWO,OAAS,EAAGO,GAAK,EAAGA,KAASV,EAAIJ,EAAWc,MAAIN,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,EAChJ,OAAOH,GAAI,GAAKG,GAAKC,OAAOM,eAAed,EAAQC,EAAKM,GAAIA,GAE5DQ,WAA0C,SAAUC,EAAGC,GANvDnB,GAAc,YAAdA,mBAAAA,SAAAA,YAAAA,QAAAA,WAAoDC,kBAAzBD,SAAeoB,SAAsBlB,MAAQC,SAA9BiB,SAAyCF,EAAAC,ICA3EE,EAACC,QAAM,UACnBC,mBAAAD,QAAqF,oBAIzEE,SAAQF,QAAM,0BAG1BG,OAAAA,WAAA,QAAAA,KAAAC,gBAAAC,KAAAF,GAAA,MAAAG,cAAAH,IAAAtB,IAAA,aAAA0B,MAAA,SACeC,EAAqBC,GAQ5B,MANAD,GAAOE,QAAUX,EAAEY,QACfC,GAAI,wBACJC,GAAI,yBACLL,EAAOE,UAIND,IAAKA,EACLD,OAAQA,MAXpB3B,IAAA,YAAA0B,MAAA,SAecO,GACN,MAAOA,GAAOC,UAAUb,UACnBc,KAAK,SAAAC,GACF,MAAIH,GAAOL,IAAIS,MACJJ,EAAOC,UAAUb,UAAYiB,MAAO,UACtCH,KAAK,SAAAI,GACF,MAAOH,GAAMI,OAAOD,SAGrBH,QAxB3Bd,IADAA,QAAAzB,YAACuB,mBAAAqB,WACD3B,WAAA,yBAgBQQ,QAhBKoB,QAAApB,OAAMA","file":"../index.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/// <reference types=\"mocha\"/>\nconst _ = require('lodash');\nconst development_core_1 = require('development-core');\nconst webTasks = require('./tasks/WebDefaultTask');\nlet Define = class Define {\n    loadConfig(option, env) {\n        // register default asserts.\n        option.asserts = _.extend({\n            ts: 'development-assert-ts',\n            js: 'development-assert-js'\n        }, option.asserts);\n        return {\n            env: env,\n            option: option\n        };\n    }\n    loadTasks(config) {\n        return config.findTasks(webTasks)\n            .then(tasks => {\n            if (config.env.serve) {\n                return config.findTasks(webTasks, { group: 'serve' })\n                    .then(serTasks => {\n                    return tasks.concat(serTasks || []);\n                });\n            }\n            else {\n                return tasks;\n            }\n        });\n    }\n};\nDefine = __decorate([\n    development_core_1.taskdefine, \n    __metadata('design:paramtypes', [])\n], Define);\nexports.Define = Define;\n","/// <reference types=\"mocha\"/>\r\nimport * as _ from 'lodash';\r\nimport { ITask, ITaskConfig, IEnvOption, ITaskOption, ITaskDefine, taskdefine } from 'development-core';\r\n\r\nexport * from './WebTaskOption';\r\n\r\nimport * as webTasks from './tasks/WebDefaultTask';\r\n\r\n@taskdefine\r\nexport class Define implements ITaskDefine {\r\n    loadConfig(option: ITaskOption, env: IEnvOption): ITaskConfig {\r\n        // register default asserts.\r\n        option.asserts = _.extend({\r\n            ts: 'development-assert-ts',\r\n            js: 'development-assert-js'\r\n        }, option.asserts);\r\n\r\n\r\n        return <ITaskConfig>{\r\n            env: env,\r\n            option: option\r\n        }\r\n    }\r\n\r\n    loadTasks(config: ITaskConfig): Promise<ITask[]> {\r\n        return config.findTasks(webTasks)\r\n            .then(tasks => {\r\n                if (config.env.serve) {\r\n                    return config.findTasks(webTasks, { group: 'serve' })\r\n                        .then(serTasks => {\r\n                            return tasks.concat(serTasks || []);\r\n                        });\r\n                } else {\r\n                    return tasks;\r\n                }\r\n\r\n            });\r\n    }\r\n}\r\n"]}