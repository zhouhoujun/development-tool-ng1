{"version":3,"sources":["index.js","index.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","_","require","development_core_1","path","WebDefine","config","option","asserts","extend","ts","js","bindingConfig","ctx","findTasksInDir","join","__dirname","taskdefine","exports"],"mappings":"AAAA;;;;;;;;AACA,IAAIA,aAAc,aAAQ,UAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,QAAIC,IAAIC,UAAUC,MAAlB;AAAA,QAA0BC,IAAIH,IAAI,CAAJ,GAAQH,MAAR,GAAiBE,SAAS,IAAT,GAAgBA,OAAOK,OAAOC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,QAA2HO,CAA3H;AACA,QAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,QAAQC,QAAf,KAA4B,UAA/D,EAA2EL,IAAII,QAAQC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,IAAIb,WAAWM,MAAX,GAAoB,CAAjC,EAAoCO,KAAK,CAAzC,EAA4CA,GAA5C;AAAiD,YAAIH,IAAIV,WAAWa,CAAX,CAAR,EAAuBN,IAAI,CAACH,IAAI,CAAJ,GAAQM,EAAEH,CAAF,CAAR,GAAeH,IAAI,CAAJ,GAAQM,EAAET,MAAF,EAAUC,GAAV,EAAeK,CAAf,CAAR,GAA4BG,EAAET,MAAF,EAAUC,GAAV,CAA5C,KAA+DK,CAAnE;AAAxE,KACL,OAAOH,IAAI,CAAJ,IAASG,CAAT,IAAcC,OAAOM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;AAMA,IAAIQ,aAAc,aAAQ,UAAKA,UAAd,IAA6B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC1D,QAAI,QAAON,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,QAAQO,QAAf,KAA4B,UAA/D,EAA2E,OAAOP,QAAQO,QAAR,CAAiBF,CAAjB,EAAoBC,CAApB,CAAP;AAC9E,CAFD;ACPA;AACA,IAAYE,IAACC,QAAM,QAAN,CAAb;AACA,IAAAC,qBAAAD,QAA4F,kBAA5F,CAAA;AAGA,IAAYE,OAAIF,QAAM,MAAN,CAAhB;AAIA,IAAAG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mCACeC,MADf,EACkC;AAC1B;AACAA,mBAAOC,MAAP,CAAcC,OAAd,GAAwBP,EAAEQ,MAAF,CAAS;AAC7BC,oBAAI,uBADyB;AAE7BC,oBAAI;AAFyB,aAAT,EAGrBL,OAAOC,MAAP,CAAcC,OAHO,CAAxB;AAMA,mBAAOL,mBAAAS,aAAA,CAAcN,MAAd,CAAP;AACH;AAVL;AAAA;AAAA,8BAYUO,GAZV,EAY2B;AACnB,mBAAOA,IAAIC,cAAJ,CAAmBV,KAAKW,IAAL,CAAUC,SAAV,EAAqB,SAArB,CAAnB,CAAP;AACH;AAdL;;AAAA;AAAA,GAAA;AADAX,YAAAxB,WAAA,CAACsB,mBAAAc,UAAD,EDqBIpB,WAAW,mBAAX,EAAgC,EAAhC,CCrBJ,CAAA,EDsBGQ,SCtBH,CAAA;AACaa,QAAAb,SAAA,GAASA,SAAT","file":"../index.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/// <reference types=\"mocha\"/>\nconst _ = require('lodash');\nconst development_core_1 = require('development-core');\nconst path = require('path');\nlet WebDefine = class WebDefine {\n    getContext(config) {\n        // register default asserts.\n        config.option.asserts = _.extend({\n            ts: 'development-assert-ts',\n            js: 'development-assert-js'\n        }, config.option.asserts);\n        return development_core_1.bindingConfig(config);\n    }\n    tasks(ctx) {\n        return ctx.findTasksInDir(path.join(__dirname, './tasks'));\n    }\n};\nWebDefine = __decorate([\n    development_core_1.taskdefine, \n    __metadata('design:paramtypes', [])\n], WebDefine);\nexports.WebDefine = WebDefine;\n","/// <reference types=\"mocha\"/>\r\nimport * as _ from 'lodash';\r\nimport { ITask, ITaskConfig, bindingConfig, ITaskContext, IContextDefine, taskdefine } from 'development-core';\r\n\r\nexport * from './WebTaskOption';\r\nimport * as path from 'path';\r\n\r\n\r\n@taskdefine\r\nexport class WebDefine implements IContextDefine {\r\n    getContext(config: ITaskConfig): ITaskContext {\r\n        // register default asserts.\r\n        config.option.asserts = _.extend({\r\n            ts: 'development-assert-ts',\r\n            js: 'development-assert-js'\r\n        }, config.option.asserts);\r\n\r\n\r\n        return bindingConfig(config);\r\n    }\r\n\r\n    tasks(ctx: ITaskContext): Promise<ITask[]> {\r\n        return ctx.findTasksInDir(path.join(__dirname, './tasks'));\r\n    }\r\n}\r\n"]}